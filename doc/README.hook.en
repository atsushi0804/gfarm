README for syscall-hooking library

*** Trapping system calls for porting legacy or commercial
    applications

To utilize a Gfarm filesystem by legacy or commercial applications
including the Objectivity object database and the ROOT I/O, system
call trapping of file I/O operations is provided.

This document shows how to compile applications to access Gfarm files
on a Gfarm filesystem, and some extensions of Gfarm URL.  Also refer
to sample programs in the gfptool/ directory and provided by
http://datafarm.apgrid.org/

** C program

To trap system calls, just link the application with gfs_hook.o.

	% cc prog.c /usr/grid/lib/gfs_hook.o -lgfarm -lldap -llber

When you are using gcc and glibc version 2.2.91 or later, it is
necessary to link statically with -static option.

	% cc -static prog.c /usr/grid/lib/gfs_hook.o -lgfarm -lldap -llber \
		-lssl -lcrypto -lsasl -ldl

Or, with the Globus GSI library of the flavor gcc32,

	% gcc -static prog.c -I/usr/grid/include/gcc32 -L/usr/grid/lib \
		/usr/grid/lib/gfs_hook.o -lgfarm \
		`globus-make-header -static -flavor=gcc32 globus_gssapi_gsi | perl -n -e 'if (/GLOBUS_PKG_LIBS = (.*)/){print $1;}'`\
		-lldap -llber -lsasl -ldl

After linking with gfs_hook.o, it is possible to access Gfarm files
via Gfarm URL like gfarm:foo.

When you can utilize a local file view, it is necessary to insert
gfarm_initialize() and gfarm_terminate() to your program as follows.

#include <gfarm/gfarm.h>

int
main(int argc, char *argv[])
{
    ...
    gfarm_initialize(&argc, &argv);
    ...
    gfarm_terminate();
    exit(0);
}

In this case, your programs can be executed using gfrun in parallel.

For newly created files, the default file view is a local file view.
For existent files, if the number of processes and the number of file
fragments are the same, the default file view is a local file view,
otherwise, the default view is a global view.

** C++ program

There are three hints for C++ programs.

1. include <gfarm/gfarm.h> enclosed with extern "C".

extern "C" {
#include <gfarm/gfarm.h>
}

2. add :: before the function name.

    char *e;
    e = ::gfarm_initialize(&argc, &argv);
    if (e != NULL) {
        cerr << "gfarm_initialize: " << e;
        exit(1);
    }

3. don't call ::gfarm_terminate().

** MPI application

In the case of MPI applications, you do not need to modify your source
code any more, just link with gfs_hook_mpi.o.

	% mpicc prog.c /usr/grid/lib/gfs_hook_mpi.o -lgfarm -lldap -llber

	% mpicc -static prog.c /usr/grid/lib/gfs_hook.o -lgfarm -lldap -llber \
		-lssl -lcrypto -lsasl -ldl

----------------------------------------------------------------------

** Extended Gfarm URL

Some applications including Objectivity object database requires an
absolute path name that should start with '/'.  Some applications like
ROOT I/O cuts off the filename before ':' without any investigation.
We provide varieties of Gfarm URL; '/gfarm:' and 'gfarm@'.  For
example, 'gfarm:foo.txt' is also referred to by '/gfarm:foo.txt' or
'gfarm@foo.txt'.

We also provide a way to explicitly specify a fragment index of a
Gfarm file by extending Gfarm URL.  gfarm::0:foo.txt specifies the
first fragment of gfarm:foo.txt.

** gfs_hook APIs

Gfs_hook APIs are provided for further manipulation of file views
beyond the default semantics for legacy applications.

* default file view

The following APIs change the default file view of the succeeding file
opening or creating operations.

void gfs_hook_set_default_view_local(void);
void gfs_hook_set_default_view_index(int index, int nfrags);
void gfs_hook_set_default_view_global(void);

* changing file view

The following APIs change the file view of a file specified by a file
descriptor 'fd'.  The semantics is same as gfs_pio_set_view_local (3),
gfs_pio_set_view_index (3), and gfs_pio_set_view_global (3),
respectively, except the first argument.

char *
gfs_hook_set_view_local(int fd, int flags);

char *
gfs_hook_set_view_index(int fd, int nfrags, int index, char *host, int flags);

char *
gfs_hook_set_view_global(int fd, int flags);

$Id$
