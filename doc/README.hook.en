README for syscall-hooking library

*** Limitation

This syscall-hooking library does not work with newer version than
glibc version 2.3.2 such as glibc included in Fedora Core 1.

*** Trapping system calls for porting legacy or commercial
    applications

To utilize a Gfarm filesystem by legacy or commercial applications
including the Objectivity object database, the ROOT I/O, and SAO ds9,
system call trapping of file I/O operations is provided.

This document shows how to compile and run applications to access
Gfarm files on a Gfarm filesystem, and some extensions of Gfarm URL.

See also sample programs in the gfptool/ directory and at
http://datafarm.apgrid.org/

** How to build programs

* C program

To trap system calls, just link the application with gfs_hook.o.

	% cc prog.c /usr/grid/lib/gfs_hook.o -lgfarm -lldap -llber

When you are using glibc version 2.2.91 or later, it is necessary to
link statically with -static option.

	% cc -static prog.c /usr/grid/lib/gfs_hook.o -lgfarm -lldap -llber \
		-lssl -lcrypto -lsasl -ldl

or

	% cc -static prog.c /usr/grid/lib/gfs_hook.o -lgfarm -lldap -llber \
		-lssl -lcrypto -lsasl2 -lkrb5 -lk5crypto -lcom_err -ldl

Note that openldap libraries in a rpm package cannot be linked
statically in RedHat-9 and Fedora Core 1.  It results in segmentation
fault.  In this case, you need to install openldap and required
libraries such as Berkeley DB by yourself.

Note that static linking results in segmentation fault when using LDAP
authentication in RedHat-8.0 and RedHat-7.3.

In the case with the Globus GSI library of the flavor gcc32,

	% gcc -static prog.c -I/usr/grid/include/gcc32 -L/usr/grid/lib \
		/usr/grid/lib/gfs_hook.o -lgfarm \
		`globus-makefile-header -static -flavor=gcc32 globus_gssapi_gsi | perl -n -e 'if (/GLOBUS_PKG_LIBS = (.*)/){print $1;}'` \
		-lldap -llber -lsasl -ldl

After linking with gfs_hook.o, it is possible to access Gfarm files
via Gfarm URL like gfarm:foo.

For newly created files, the default file view is a local file view.
For existent files, if the number of processes and the number of file
fragments are the same, the default file view is a local file view,
otherwise, the default view is a global view.

* Fortran and C++ programs

Follows the section for C programs but with an appropriate compiler.

* MPI program

In the case of MPI programs, link with gfs_hook_no_init.o and
hooks_init_mpi.c instead of gfs_hook.o.

	% mpicc prog.c /usr/lib/gfs_hook_no_init.o /usr/lib/hooks_init_mpi.c \
		-lgfarm -lldap -llber

or

	% mpicc -static prog.c /usr/lib/gfs_hook_mpi.o \
		/usr/lib/hooks_init_mpi.c -lgfarm -lldap -llber \
		-lssl -lcrypto -lsasl -ldl

** How to run programs

Applications with a syscall-hook library are needed to be executed by
gfrun command.

      % gfrun gfarm:foo

      % gfrun -G gfarm:input gfarm:foo gfarm:input

----------------------------------------------------------------------

** Extended Gfarm URL

Some applications including Objectivity object database and SAO ds9
require an absolute path name that should start with '/'.  Some
applications like ROOT I/O cut off the filename before ':' without any
investigation.  We provide a variety of Gfarm URL; 'gfarm@'.  For
example, 'gfarm:~/foo.txt' is also referred to by 'gfarm@~/foo.txt'.

Moreover, we provide a mount point for a Gfarm file system; '/gfarm'.
'/gfarm/' is considered to be the root directory in Gfarm file system
instead of a current working directory.  That is because applications
usually assume that '/gfarm/' is an absolute path.  A home directory
and the current directory can be specified by '/gfarm/~' and
'/gfarm/.', respectively.

We also provide a way to explicitly specify a fragment index (or
section) of a Gfarm file by extending Gfarm URL.  'gfarm::0:foo.txt',
'gfarm@:0:foo.txt', or '/gfarm:0:/./foo.txt' specifies the first
fragment of 'gfarm:foo.txt'.

** gfs_hook APIs

Gfs_hook APIs are provided for further manipulation of file views
beyond the default semantics for legacy applications.

* default file view

The following APIs change the default file view of the succeeding file
opening or creating operations.

void gfs_hook_set_default_view_local(void);
void gfs_hook_set_default_view_index(int index, int nfrags);
void gfs_hook_set_default_view_section(char *section);
void gfs_hook_set_default_view_global(void);

* changing file view

The following APIs change the file view of a file specified by a file
descriptor 'fd'.  The semantics is same as gfs_pio_set_view_local (3),
gfs_pio_set_view_index (3), gfs_pio_set_view_section (3), and
gfs_pio_set_view_global (3), respectively, except the first argument.

char *
gfs_hook_set_view_local(int fd, int flags);

char *
gfs_hook_set_view_index(int fd, int nfrags, int index, char *host, int flags);

char *
gfs_hook_set_view_section(int fd, char *section, char *host, int flags);

char *
gfs_hook_set_view_global(int fd, int flags);

$Id$
