		File access from existing applications
		 (README for syscall-hooking library)

Gfarm syscall-hooking library (libgfs_hook.so or gfs_hook.o) enables
every existing (binary) program to access Gfarm file system as if it
were mounted on /gfarm.

Basically the syscall-hooking library traps every system call for file
access.  When a file is under the mount point /gfarm or a Gfarm URL
starting with 'gfarm:' or 'gfarm@', appropriate Gfarm I/O APIs are
called.

Contents
--------

1) Configuration

  1-1) Linux, FreeBSD, NetBSD, Solaris, Mac OS X and HP-UX

  Every existing program can access Gfarm file system without any
  modification.

  1-2) AIX

  Just re-linking with the syscall-hooking library, every existing
  program can access Gfarm file system.

  1-3) Other systems

  Contact datafarm@apgrid.org.

2) Limitation of syscall-hooking library

3) Semantics and extended APIs

======================================================================

1) Configuration

1-1) Linux, FreeBSD, NetBSD, Solaris, Mac OS X, HP-UX and Tru64
---------------------------------------------------------------

Exploiting a preload mechanism that loads specified shared libraries
before executing application, every existing program can access Gfarm
file system without any modification.

 (1) Linux
===========

It is necessary to install a glibc-not-hidden package to enable
necessary system calls to hook properly.
http://datafarm.apgrid.org/software/sycall-hook.en.html#glibc-not-hidden

If you cannot install glibc-not-hidden package, it is necessary to
re-link syscall-hooking library statically described in Section 2.
Or, you can use GfarmFS-FUSE.
       http://datafarm.apgrid.org/software/gfarmfs-fuse.en.html

Specify libgfs_hook.so.0 and glib{rt,pthread,c}-not-hidden.so in
LD_PRELOAD environment variable.

In the case of sh or bash,

	$ LD_PRELOAD='%%LIBDIR%%/libgfs_hook.so.0 /usr/lib/gfarm/librt-not-hidden.so /usr/lib/gfarm/libpthread-not-hidden.so /usr/lib/gfarm/libc-not-hidden.so'
	$ export LD_PRELOAD

In the case of csh or tcsh,

	% setenv LD_PRELOAD '%%LIBDIR%%/libgfs_hook.so.0 /usr/lib/gfarm/librt-not-hidden.so /usr/lib/gfarm/libpthread-not-hidden.so /usr/lib/gfarm/libc-not-hidden.so'

After specifying LD_PRELOAD environment variable, every application
can access Gfarm file system as if it were mounted on /gfarm.

Make sure that the above setting does work by invoking your
login shell. e.g.

	% bash

When using GSI-enabled Gfarm, some programs, which are linked with
libgssapi based on Kerberos, may cause segmentation fault or cannot
access Gfarm file system.  In this case, you need to add libgssapi
based on GSI and libssl in LD_PRELOAD environment variable as well.
For example, scp and wget sometimes fit this sort of programs.

If the globus flavor name which is linked with Gfarm is %%GLOBUS_FLAVOR%%,
You need to specify $GLOBUS_LOCATION/lib/libglobus_gssapi_gsi_%%GLOBUS_FLAVOR%%.so.0
and $GLOBUS_LOCATION/lib/libssl_%%GLOBUS_FLAVOR%%.so.0 as follows.

	$ LD_PRELOAD="$GLOBUS_LOCATION/lib/libglobus_gssapi_gsi_%%GLOBUS_FLAVOR%%.so.0 $GLOBUS_LOCATION/lib/libssl_%%GLOBUS_FLAVOR%%.so.0 %%LIBDIR%%/libgfs_hook.so.0 /usr/lib/gfarm/librt-not-hidden.so /usr/lib/gfarm/libpthread-not-hidden.so /usr/lib/gfarm/libc-not-hidden.so"
	$ export LD_PRELOAD


 (2) FreeBSD
=============

Specify libgfs_hook.so.0 in LD_PRELOAD environment variable.

In the case of sh or bash,

	$ LD_PRELOAD=%%LIBDIR%%/libgfs_hook.so.0
	$ export LD_PRELOAD

In the case of csh or tcsh,

	% setenv LD_PRELOAD %%LIBDIR%%/libgfs_hook.so.0

Note that this LD_PRELOAD setting won't work with commands in /bin
when using FreeBSD 4.X or earlier, because the commands are statically
linked.  If you are using such a release, it's better to create
dynamically linked executables for these commands in a directory like
/usr/local/dynbin, and add the directory to your $PATH, by the
following procedures;

(1) extract sbin.?? and subin.?? in the source distribution
	# cd /usr/src
	# cat ${FREEBSD_RELEASE_DIRECTORY}/src/sbin.?? | tar zpxf -
	# cat ${FREEBSD_RELEASE_DIRECTORY}/src/subin.?? | tar zpxf -

(2) change the configuration from static to dynamic linkage
	# cd bin
	# vi Makefile.inc
	  ... comment out the following line
		NOSHARED?=	YES

(3) build, and install to an appropriate directory (/usr/local/dynbin
  in this example)
	# sh -c 'for d in cat chmod cp ls mkdir mv pax pwd rcp rm rmdir sh test; do ( cd $d; make ); done'
	# sh -c 'for d in cat chmod cp ls mkdir mv pax pwd rcp rm rmdir sh test; do ( cd $d; make NOMAN=noman BINDIR=/usr/local/dynbin install ); done'

Or, you can download dynamically linked /bin binaries for FreeBSD-4.11/i386
from

https://datafarm.apgrid.org/software/freebsd/bin-FreeBSD-4.11-i386.tar.gz

 3) NetBSD
===========

Specify libgfs_hook.so.0 in LD_PRELOAD environment variable.

In the case of sh or bash,

	$ LD_PRELOAD=%%LIBDIR%%/libgfs_hook.so.0
	$ export LD_PRELOAD

In the case of csh or tcsh,

	% setenv LD_PRELOAD %%LIBDIR%%/libgfs_hook.so.0

Note that this LD_PRELOAD setting won't work with commands in /bin
when using NetBSD 1.X or earlier, because the commands are statically
linked.  If you are using such a release, it's better to create
dynamically linked executables for these commands in a directory like
/usr/local/dynbin, and add the directory to your $PATH, by the
following procedures;

(1) extract src.tgz in the source distribution
	# cd /
	# tar zpxf ${NETBSD_RELEASE_DIRECTORY}/source/sets/src.tgz

(2) change the configuration from static to dynamic linkage
	# cd usr/src/bin
	# vi Makefile.inc
	  ... comment out the following line
		LDSTATIC?=	-static

(3) build, and install to an appropriate directory (/usr/local/dynbin
  in this example)
	# sh -c 'for d in cat chmod cp ls mkdir mv pax pwd rcp rm rmdir sh test; do ( cd $d; make ); done'
	# sh -c 'for d in cat chmod cp ls mkdir mv pax pwd rcp rm rmdir sh test; do ( cd $d; make MKMAN=no BINDIR=/usr/local/dynbin install ); done'

Or, you can download dynamically linked /bin binaries for NetBSD-1.6.2/i386
from

https://datafarm.apgrid.org/software/netbsd/bin-NetBSD-1.6.2-i386.tar.gz

 (4) Solaris
=============

Specify libgfs_hook.so.0 in LD_PRELOAD environment variable.

In the case of sh or bash,

	$ LD_PRELOAD=%%LIBDIR%%/libgfs_hook.so.0
	$ export LD_PRELOAD

In the case of csh or tcsh,

	% setenv LD_PRELOAD %%LIBDIR%%/libgfs_hook.so.0

Solaris is not tested well.  At least, we know there is a restriction
such that directory access via readdir(3) doesn't work.

 (5) MacOS X
=============

Specify libgfs_hook.dynlib in DYLD_INSERT_LIBRARIES environment variable,
and also set DYLD_FORCE_FLAT_NAMESPACE environment variable as well.
To specify multiple libraries in DYLD_INSERT_LIBRARIES, each library
should be separated by ":" (colon).
You can specify any value to the DYLD_FORCE_FLAT_NAMESPACE,
the existence of the variable itself makes an effect.

In the case of sh or bash,

	$ DYLD_INSERT_LIBRARIES=%%LIBDIR%%/libgfs_hook.dylib
	$ DYLD_FORCE_FLAT_NAMESPACE=
	$ export DYLD_INSERT_LIBRARIES DYLD_FORCE_FLAT_NAMESPACE

In the case of csh or tcsh,

	% setenv DYLD_INSERT_LIBRARIES %%LIBDIR%%/libgfs_hook.dylib
	% setenv DYLD_FORCE_FLAT_NAMESPACE ""

MacOS X is barely tested.

 (6) HP-UX
=============

Specify libgfs_hook.sl in LD_PRELOAD environment variable.

In the case of sh or bash,

	$ LD_PRELOAD=%%LIBDIR%%/libgfs_hook.sl
	$ export LD_PRELOAD

In the case of csh or tcsh,

	% setenv LD_PRELOAD %%LIBDIR%%/libgfs_hook.sl

HP-UX is barely tested.  At least, we know there is a restriction
such that directory access via readdir(3) doesn't work.

 (7) Tru64
=============

Specify libgfs_hook.so.0 in _RLD_LIST environment variable.
To specify multiple libraries in _RLD_LIST, each library should be
separated by ":" (colon).
Also, ":DEFAULT" is needed at the end of the variable.

In the case of sh or bash,

	$ _RLD_LIST=%%LIBDIR%%/libgfs_hook.so.0:DEFAULT
	$ export _RLD_LIST

In the case of csh or tcsh,

	% setenv _RLD_LIST %%LIBDIR%%/libgfs_hook.so.0:DEFAULT

It is known that gfhost command and scheduling functions do not
correctly work on Tru64. Also, we know there is a restriction
such that directory access via readdir(3) doesn't work.

 (8) OS-independent settings
=============================

It is useful to specify the above in the shell rc file such as .bashrc
and .cshrc.  We recommend to use bash because it is well tested.

If you would like to access Gfarm file system in your interactive
shell, just execute the shell again.

	% exec bash -l

Now, you can change the current working directory to /gfarm, and you
can use filename completion in the shell.

	bash$ cd /gfarm

For MPI applications, it is necessary to generate libgfs_hook.so for
MPI library in your environment, or follow the Section 2.

There are some limitations of system-call hooking library.  Refer to
the following "Limitation" section.

-----------------------------------------------------------------------

1-2) AIX
--------

When an operating system does not support a preload mechanism, it is
necessary to re-link with Gfarm syscal-hooking library, gfs_hook.o, to
access Gfarm file system.

Note that it is necessary to link with gfs_hook.o statically when you
are using GNU C library (glibc) typically in Linux to hook necessary
system calls properly.

* C program

Re-create applications by linking with gfs_hook.o and -lgfarm.

	% cc prog.o %%LIBDIR%%/gfs_hook.o -lgfarm

For static linking, you can use libtool with the -all-static option.

	% libtool --mode=link cc -all-static prog.c -o prog %%LIBDIR%%/gfs_hook.o -lgfarm -lglobus_gssapi_gsi_%%GLOBUS_FLAVOR%% -lsasl 

Note that static linking results in segmentation fault when using LDAP
authentication in RedHat-8.0 and RedHat-7.3.

* Fortran or C++ program

Follows the section for 'C program' and links with gfs_hook.o and
-lgfarm but with an appropriate compiler.

* MPI program

In the case of MPI programs, link with gfs_hook_no_init.o and
hooks_init_mpi.c instead of gfs_hook.o.

	% mpicc prog.o %%LIBDIR%%/gfs_hook_no_init.o %%LIBDIR%%/hooks_init_mpi.c \
		-lgfarm

-----------------------------------------------------------------------

1-3) Other systems
------------------

Contact datafarm@apgrid.org.

======================================================================

2) Limitation of syscall-hooking library
----------------------------------------

(This limitation is not applied to GfarmFS-FUSE.)

2-1) Access limitation from a client (that is not a file system node)

There are some limitations for access to files, programs, and shared
libraries in Gfarm file system from a client node that is not a file
system node.  The following is not supported for now.

 - program execution
 - shared library linking
 - file creation by a child process via a redirection
 - file input via a redirection

Access for programs, i.e. creating a file with execution bits, and/or
reading a file which has execution bits, are possible even on a client
node, by setting an environment variable as follows, or configuring
~/.gfarmrc.  Please look at gfarm.conf(5) man page about the
~/.gfarmrc configuration.

	$ export GFARM_ARCHITECTURE=`gfarm.arch.guess`

2-2) Access limitation from a file system node

There are some limitations for access to files via a redirection in
Gfarm file system from a file system node.

Regarding file creation via a redirection, it is supported only when
it creates a new file.

Regarding file input via a redirection, it is supported only when
GFARM_FLAGS is specified to enable on-demand replication feature,

	bash$ export GFARM_FLAGS=r

In this case, every file will be replicated to the local file system
on demand instead of accessing remotely.  For example, 'tar zxfp
foo.tar.gz' requires this setting.

======================================================================

3) Semantics and extended APIs
------------------------------

3-1) File view semantics

For newly created files, the default file view is a local file view.
For existent files, if the number of processes and the number of file
fragments are the same, the default file view is a local file view,
otherwise, the default view is a global view.

When you execute 'gfrun' with the -b option, you can change the
default view to the global file view.

3-2) Extended Gfarm URL

Some applications like ROOT I/O cut off the filename before ':'
without any investigation.  We provide a variety of Gfarm URL;
'gfarm@'.  For example, 'gfarm:~/foo.txt' is also referred to by
'gfarm@~/foo.txt'.

Moreover, we provide a (quasi) mount point for a Gfarm file system;
'/gfarm'.  A home directory in Gfarm file system and the current
working directory can be specified by '/gfarm/~' and '/gfarm/.',
respectively.

We also provide a way to explicitly specify a fragment index (or
section name) of a Gfarm file by extending Gfarm URL.
'gfarm::0:foo.txt', 'gfarm@:0:foo.txt', or '/gfarm:0:/./foo.txt'
specifies the first fragment of 'gfarm:foo.txt'.

3-3) gfs_hook APIs

Gfs_hook APIs are provided for further manipulation of file views
beyond the default semantics.

3-3-1 default file view

The following APIs change the default file view of the succeeding file
opening or creating operations.

void gfs_hook_set_default_view_local(void);
void gfs_hook_set_default_view_index(int index, int nfrags);
void gfs_hook_set_default_view_section(char *section);
void gfs_hook_set_default_view_global(void);

3-3-2 changing file view

The following APIs change the file view of a file specified by a file
descriptor 'fd'.  The semantics is same as gfs_pio_set_view_local(3),
gfs_pio_set_view_index(3), gfs_pio_set_view_section(3), and
gfs_pio_set_view_global(3), respectively, except the first argument.

char *
gfs_hook_set_view_local(int fd, int flags);

char *
gfs_hook_set_view_index(int fd, int nfrags, int index, char *host, int flags);

char *
gfs_hook_set_view_section(int fd, char *section, char *host, int flags);

char *
gfs_hook_set_view_global(int fd, int flags);

$Id$
