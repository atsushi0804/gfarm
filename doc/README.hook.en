		File access from existing applications
		 (README for syscall-hooking library)

Gfarm syscall-hooking library enables every existing (binary) program
to access Gfarm file system without any modification as if it were
mounted at /gfarm.

Basically the syscall-hooking library traps every system call for file
access.  When a file is under the mount point /gfarm or a Gfarm URL
starting with 'gfarm:' or 'gfarm@', appropriate Gfarm I/O APIs are
called.

*** glibc-not-hidden

When you are using GNU C library (glibc) typically in Linux, it is
necessary to install a glibc-not-hidden package to enable necessary
system calls to hook properly.  The change is just for a version
script for ld to add necessary symbols (__lseek64, __getdents,
__getdents64, and so on) to the dynamic symbol table.

When you install the glibc-not-hidden package, every application can
access Gfarm file system without any modification.

Binary and source packages of glibc-not-hidden are available from
Gfarm web site (http://datafarm.apgrid.org/software/) for typical
distribution of Linux.  If you need a glibc package other than
provided, contact datafarm@apgrid.org.

If you cannot install glibc-not-hidden package, follow the section of
'Running existing programs by statically linking with syscall-hooking
library'.

*** Running existing programs without any modification

Every dynamically linked executable can access Gfarm file system by
just specifying LD_PRELOAD environment variable in Linux and possibly
in Solaris.

In the case of sh or bash,

	$ LD_PRELOAD='/usr/lib/libgfs_hook.so.0 /usr/lib/gfarm/libpthread-not-hidden.so /usr/lib/gfarm/libc-not-hidden.so'
	$ export LD_PRELOAD

In the case of csh or tcsh,

	% setenv LD_PRELOAD '/usr/lib/libgfs_hook.so.0 /usr/lib/gfarm/libpthread-not-hidden.so /usr/lib/gfarm/libc-not-hidden.so'

Please make sure that the above setting does work by invoking your
login shell. e.g.

	% bash

On some Linux distributions like Fedora Core 2, it is possible that
a message like the following may be displayed, and the shell
invocation may fail:

	bash: /usr/lib/gfarm/libpthread-not-hidden.so: version `GLIBC_2.3.3' not found (required by /lib/tls/librt.so.1)

In that case, please add /usr/lib/gfarm/librt-not-hidden.so to LD_PRELOAD
as well like follows.

In the case of sh or bash,

	$ LD_PRELOAD='/usr/lib/libgfs_hook.so.0 /usr/lib/gfarm/librt-not-hidden.so /usr/lib/gfarm/libpthread-not-hidden.so /usr/lib/gfarm/libc-not-hidden.so'
$ export LD_PRELOAD

In the case of csh or tcsh,

	% setenv LD_PRELOAD '/usr/lib/libgfs_hook.so.0 /usr/lib/gfarm/librt-not-hidden.so /usr/lib/gfarm/libpthread-not-hidden.so /usr/lib/gfarm/libc-not-hidden.so'

You can specify the above in the shell rc file such as .bashrc and
.cshrc.  We recommend to use bash because it is well tested.

After specifying the environment variable, every program can access to
Gfarm file system.  If you would like to access Gfarm file system in
your interactive shell, just execute bash again.

	% exec bash -l

Now, you can change the current working directory to /gfarm, or enable
filename completion.

	% cd /gfarm

Currently, program execution and file creation by a child process via
a redirection can be supported on a file system node.

To support file input via a redirection, you need to specify
GFARM_FLAGS to enable on-demand replication feature.

	% export GFARM_FLAGS=r

In this case, every file will be replicated to the local file system
on demand instead of accessing remotely.  For example, 'tar zxfp
foo.tar.gz' requires this setting.

For MPI applications, it is necessary to generate libgfs_hook.so for
MPI library in your environment, or follow a section of either
'Running existing programs by linking with syscall-hooking library' or
'Running existing programs by statically linking with syscall-hooking
library'.

*** Running existing programs by linking with syscall-hooking library

When your operating system does not support LD_PRELOAD, it is
necessary to re-link with Gfarm syscall-hooking library to access
Gfarm file system.

This section is only applied only when necessary system calls can be
hooked.  If not, follow the next section "Running existing programs by
statically linking with syscall-hooking library".

* C program

	% cc prog.o /usr/lib/gfs_hook.o -lgfarm

* Fortran or C++ program

Follows the section for 'C program' but with an appropriate compiler.

* MPI program

In the case of MPI programs, link with gfs_hook_no_init.o and
hooks_init_mpi.c instead of gfs_hook.o.

	% mpicc prog.o /usr/lib/gfs_hook_no_init.o /usr/lib/hooks_init_mpi.c \
		-lgfarm

*** Running existing programs by statically linking with
    syscall-hooking library

The last resort is to link statically with the Gfarm syscall-hook
library and Gfarm I/O library.

* C program

Re-link using -static option with gfs_hook.o and -lgfarm.  Other
libraries that need to be linked with depend on the operating system.

	% cc -static prog.o /usr/lib/gfs_hook.o -lgfarm -lldap -llber \
		-lssl -lcrypto -lsasl -ldl

or

	% cc -static prog.o /usr/lib/gfs_hook.o -lgfarm -lldap -llber \
		-lssl -lcrypto -lsasl2 -lkrb5 -lk5crypto -lcom_err -ldl

Note that static linking results in segmentation fault when using LDAP
authentication in RedHat-8.0 and RedHat-7.3.

In the case with the Globus GSI library of the flavor gcc32,

	% gcc -static prog.o -I/usr/grid/include/gcc32 -L/usr/grid/lib \
		/usr/lib/gfs_hook.o -lgfarm \
		`globus-makefile-header -static -flavor=gcc32 globus_gssapi_gsi | perl -n -e 'if (/GLOBUS_PKG_LIBS = (.*)/){print $1;}'` \
		-lldap -llber -lsasl -ldl

* Fortran or C++ program

Follows the section for 'C program' but with an appropriate compiler.

* MPI program

In the case of MPI programs, link with gfs_hook_no_init.o and
hooks_init_mpi.c instead of gfs_hook.o.

	% mpicc -static prog.o /usr/lib/gfs_hook_mpi.o \
		/usr/lib/hooks_init_mpi.c -lgfarm -lldap -llber \
		-lssl -lcrypto -lsasl -ldl

----------------------------------------------------------------------

** File view semantics

For newly created files, the default file view is a local file view.
For existent files, if the number of processes and the number of file
fragments are the same, the default file view is a local file view,
otherwise, the default view is a global view.

When you execute 'gfrun' with the -b option, you can change the
default view to the global file view.

** Extended Gfarm URL

Some applications like ROOT I/O cut off the filename before ':'
without any investigation.  We provide a variety of Gfarm URL;
'gfarm@'.  For example, 'gfarm:~/foo.txt' is also referred to by
'gfarm@~/foo.txt'.

Moreover, we provide a (quasi) mount point for a Gfarm file system;
'/gfarm'.  A home directory in Gfarm file system and the current
working directory can be specified by '/gfarm/~' and '/gfarm/.',
respectively.

We also provide a way to explicitly specify a fragment index (or
section name) of a Gfarm file by extending Gfarm URL.
'gfarm::0:foo.txt', 'gfarm@:0:foo.txt', or '/gfarm:0:/./foo.txt'
specifies the first fragment of 'gfarm:foo.txt'.

** gfs_hook APIs

Gfs_hook APIs are provided for further manipulation of file views
beyond the default semantics.

* default file view

The following APIs change the default file view of the succeeding file
opening or creating operations.

void gfs_hook_set_default_view_local(void);
void gfs_hook_set_default_view_index(int index, int nfrags);
void gfs_hook_set_default_view_section(char *section);
void gfs_hook_set_default_view_global(void);

* changing file view

The following APIs change the file view of a file specified by a file
descriptor 'fd'.  The semantics is same as gfs_pio_set_view_local(3),
gfs_pio_set_view_index(3), gfs_pio_set_view_section(3), and
gfs_pio_set_view_global(3), respectively, except the first argument.

char *
gfs_hook_set_view_local(int fd, int flags);

char *
gfs_hook_set_view_index(int fd, int nfrags, int index, char *host, int flags);

char *
gfs_hook_set_view_section(int fd, char *section, char *host, int flags);

char *
gfs_hook_set_view_global(int fd, int flags);

$Id$
