	      既存アプリケーションからのアクセスについて

Gfarm ファイルシステムは，以下の設定により /gfarm にマウントしているよ
うにアクセスすることが可能です．

*** glibc-not-hidden

Linux など GNU C ライブラリ(glibc)を利用している場合，glibc-not-hidden
パッケージをインストールすると，次節の「無変更で既存のアプリケーション
を実行」が可能となります．glibc-not-hidden パッケージは Gfarm のウェブ
サイト(http://datafarm.apgrid.org/software/)から入手可能です．

もし，お使いのディストリビューション用のパッケージがない場合は，
datafarm@apgrid.org までご相談ください．

*** 無変更で既存のアプリケーションを実行

Linux や *BSD では，LD_PRELOAD 環境変数を設定することにより，任意のアプ
リケーションで，Gfarm ファイルシステムを /gfarm にマウントしているよう
にアクセスすることが可能です．Solaris でも，可能のはずですが，あまりテ
ストがなされていません．

* Linux の場合

シェルが sh あるいは bash の場合は，以下のように設定します．

	$ LD_PRELOAD='/usr/lib/libgfs_hook.so.0 /usr/lib/gfarm/libpthread-not-hidden.so /usr/lib/gfarm/libc-not-hidden.so'
	$ export LD_PRELOAD

シェルが csh (tcsh) の場合は，以下のように設定します．

	% setenv LD_PRELOAD '/usr/lib/libgfs_hook.so.0 /usr/lib/gfarm/libpthread-not-hidden.so /usr/lib/gfarm/libc-not-hidden.so'

＃ tcsh には，いくつかの不具合が報告されており，bash で実行することをお
＃ 勧めします．

この設定以降に起動するアプリケーションは，/gfarm に Gfarm ファイルシス
テムをマウントしているように利用することが可能になります．

上記の設定を行ったら，まず，ふだん利用しているシェルを起動して，動作
するかどうか確認してください．

	% bash

Fedora Core 2 をはじめとする，一部の Linux ディストリビューションでは，
上記の設定を行うと，下記のようなメッセージが表示され，シェルの起動に
失敗することがあります．

	bash: /usr/lib/gfarm/libpthread-not-hidden.so: version `GLIBC_2.3.3' not found (required by /lib/tls/librt.so.1)

このような場合，下記のように，/usr/lib/gfarm/librt-not-hidden.so も
LD_PRELOAD に追加してください．

シェルが sh あるいは bash の場合:

	$ LD_PRELOAD='/usr/lib/libgfs_hook.so.0 /usr/lib/gfarm/librt-not-hidden.so /usr/lib/gfarm/libpthread-not-hidden.so /usr/lib/gfarm/libc-not-hidden.so'
	$ export LD_PRELOAD

シェルが csh (tcsh) の場合:

	% setenv LD_PRELOAD '/usr/lib/libgfs_hook.so.0 /usr/lib/gfarm/librt-not-hidden.so /usr/lib/gfarm/libpthread-not-hidden.so /usr/lib/gfarm/libc-not-hidden.so'

* FreeBSD の場合

シェルが sh あるいは bash の場合:

	$ LD_PRELOAD=/usr/local/lib/libgfs_hook.so.0
	$ export LD_PRELOAD

シェルが csh (tcsh) の場合:

	% setenv LD_PRELOAD /usr/local/lib/libgfs_hook.so.0

以降の説明で、libgfs_hook のパス名として /usr/lib と記述してある部分は，
FreeBSD では /usr/local/lib に読み換えてください．

なお，FreeBSD の 4.X までのリリースでは，/bin にあるコマンドはスタティック
リンクされているため LD_PRELOAD が効きません．この場合，下記のような手順で
ダイナミックリンクしたコマンドを /usr/local/dynbin のような場所に作成し，
パスの先頭に加えておくと良いでしょう．
(1) ソース配布中の sbin.??, subin.?? を展開する．
	# cd /usr/src
	# cat 配布ディレクトリ/src/sbin.?? | tar zpxf -
	# cat 配布ディレクトリ/src/subin.?? | tar zpxf -
(2) 動的リンクに変更する．
	# cd bin
	# vi Makefile.inc
		下記の行をコメントに変更する．
		NOSHARED?=	YES
(3) make して，適当なディレクトリにインストールする．
  ここでは /usr/local/dynbin/ にインストールしています．
	# sh -c 'for d in cat chmod cp ls mkdir mv pax pwd rcp rm rmdir sh test; do ( cd $d; make ); done'
	# sh -c 'for d in cat chmod cp ls mkdir mv pax pwd rcp rm rmdir sh test; do ( cd $d; make NOMAN=noman BINDIR=/usr/local/dynbin install ); done'

* NetBSD で pkgsrc ないし binary package からインストールした場合

シェルが sh あるいは bash の場合:

	$ LD_PRELOAD=/usr/pkg/lib/libgfs_hook.so.0
	$ export LD_PRELOAD

シェルが csh (tcsh) の場合:

	% setenv LD_PRELOAD /usr/pkg/lib/libgfs_hook.so.0

以降の説明で，libgfs_hook のパス名として /usr/lib と記述してある部分は，
NetBSD では /usr/pkg/lib に読み換えてください．

なお，NetBSD の 1.X までのリリースでは，/bin にあるコマンドはスタティック
リンクされているため LD_PRELOAD が効きません．この場合，下記のような手順で
ダイナミックリンクしたコマンドを /usr/local/dynbin のような場所に作成し，
パスの先頭に加えておくと良いでしょう．
(1) ソース配布中の src.tgz を展開する．
	# cd /
	# tar zpxf 配布ディレクトリ/source/sets/src.tgz
(2) 動的リンクに変更する．
	# cd usr/src/bin
	# vi Makefile.inc
		下記の行をコメントに変更する．
		LDSTATIC?=	-static
(3) make して，適当なディレクトリにインストールする．
  ここでは /usr/local/dynbin/ にインストールしています．
	# sh -c 'for d in cat chmod cp ls mkdir mv pax pwd rcp rm rmdir sh test; do ( cd $d; make ); done'
	# sh -c 'for d in cat chmod cp ls mkdir mv pax pwd rcp rm rmdir sh test; do ( cd $d; make MKMAN=no BINDIR=/usr/local/dynbin install ); done'

* OS に依存しない設定事項

上記設定は，.bashrc や .cshrc など起動スクリプトに記述すると，以降の設
定が必要なくなり，便利です．

対話シェル自体で，Gfarm ファイルシステムを利用したい場合は，もう一度立
ち上げてください．

	% exec bash -l

その後は，cd や，ファイル名の補完が利用できるようになります．

	% cd /gfarm

なお，現在，Gfarm ファイルシステムに保持されているプログラムの起動，お
よび，リダイレクトによる子プロセスのファイル作成などは，（gfrun による
遠隔起動や直接の実行を含む）ファイルシステムノードでの実行のみのサポー
トとなります．

さらに，リダイレクトによるファイルの入力をサポートするためには，

	% export GFARM_FLAGS=r

と，GFARM_FLAGS に r を設定して，オンデマンドファイル複製の設定をする必
要があります．この場合，参照されるファイルはまず自ノードにファイル複製
を作成してから参照されるようになります．例えば，この設定は，'tar zxfp
foo.tar.gz' などで，ファイルを展開する場合にも必要となります．

*** 再リンクによって既存のアプリケーションを実行

LD_PRELOAD をサポートしていない OS の場合，既存のアプリケーションを再リ
ンクすることにより，Gfarm ファイルシステムを /gfarm にマウントしている
ようにアクセスすることが可能となります．

ただし，必要なシステムコールのフックが可能な場合に限ります．そうではな
い場合は，次節の「静的リンクによって既存のアプリケーションを実行」をご
参照ください．

* C プログラム

	% cc prog.o /usr/lib/gfs_hook.o -lgfarm

* Fortran あるいは C++ プログラム

C プログラムの場合と同様に gfs_hook.o と -lgfarm をリンクします．

* MPI プログラム

MPI プログラムの場合は，gfs_hook.o の代りに，gfs_hook_no_init.o と
hooks_init_mpi.c をリンクします．

	% mpicc prog.o /usr/lib/gfs_hook_no_init.o /usr/lib/hooks_init_mpi.c \
		-lgfarm

*** 静的リンクによって既存のアプリケーションを実行

上記のどれもできない場合は，既存アプリケーションを静的に再リンクするこ
とにより，Gfarm ファイルシステムを /gfarm にマウントしているようにアク
セスすることが可能となります．

* C プログラム

-static オプションを付けて gfs_hook.o および -lgfarm と再リンクします．
以下は，例ですが，その他に必要となるライブラリは OS やディストリビュー
ションによります．

	% cc -static prog.o /usr/lib/gfs_hook.o -lgfarm -lldap -llber \
		-lssl -lcrypto -lsasl -ldl

あるいは

	% cc -static prog.o /usr/lib/gfs_hook.o -lgfarm -lldap -llber \
		-lssl -lcrypto -lsasl2 -lkrb5 -lk5crypto -lcom_err -ldl

＃ RedHat 8.0 あるいは RedHat 7.3 では，アカウントの認証に LDAP を利用
＃ している場合，静的リンクされたプログラムは正しく実行されず，
＃ Segmentation Fault になるというバグがあります．

さらに，Globus の GSSAPI ライブラリを利用している場合は，以下のようにな
ります．

	% gcc -static prog.o -I/usr/grid/include/gcc32 -L/usr/grid/lib \
		/usr/lib/gfs_hook.o -lgfarm \
		`globus-makefile-header -static -flavor=gcc32 globus_gssapi_gsi | perl -n -e 'if (/GLOBUS_PKG_LIBS = (.*)/){print $1;}'` \
		-lldap -llber -lsasl -ldl

* Fortran あるいは C++ プログラム

C プログラムの場合と同様に gfs_hook.o と -lgfarm をリンクします．

* MPI プログラム

MPI プログラムの場合は，gfs_hook.o の代りに，gfs_hook_no_init.o と
hooks_init_mpi.c をリンクします．

	% mpicc -static prog.o /usr/lib/gfs_hook_mpi.o \
		/usr/lib/hooks_init_mpi.c -lgfarm -lldap -llber \
		-lssl -lcrypto -lsasl -ldl

----------------------------------------------------------------------

** ファイル・ビューのセマンティクス

ファイルを新規に作成する時のデフォルトのファイルビューはローカル・ファ
イル・ビューとなります．

存在するファイルの場合は，並列プロセスの数とファイル断片の数が同じ場合
は，デフォルトビューはローカル・ファイル・ビューとなりますが，それ以外
は，グローバル・ファイル・ビューとなります．

gfrun のオプションに -b を付けて起動すると，新規ファイルを含めたデフォ
ルトビューがグローバルファイルビューとなります．

** 拡張 Gfarm URL

ROOT I/O を含む，いくつかのアプリケーションでは，パス名に ':' をつける
ことができないものがあります．そのため，'gfarm@' を 'gfarm:' の代りに利
用できるようにしています．例えば，'gfarm:~/foo.txt' は 'gfarm@~/foo.txt'
でも参照可能です．

また，疑似マウントポイントとして /gfarm を設定し，/gfarm に Gfarm ファ
イルシステムをマウントしているようにアクセスすることが可能です．この場
合，Gfarm ファイルシステム上のホームディレクトリ，カレント・ワーキング・
ディレクトリを指定するためには．'/gfarm/~'，'/gfarm/.' と指定します．

さらに，ファイル断片の番号，アーキテクチャ名を明示的に指定することもで
きます．'gfarm::0:foo.txt'，'gfarm@:0:foo.txt'，'/gfarm:0:/./foo.txt'
はすべて，'gfarm:foo.txt' の第 0 番目のファイル断片を表します．

** gfs_hook API

デフォルトのファイルビューなどの動作を変更するために，gfs_hook API が準
備されています．

* デフォルト・ファイル・ビューの変更

以下の API は，以降のファイル・オープン，ファイル作成に対して，デフォル
ト・ファイル・ビューを変更します．

void gfs_hook_set_default_view_local(void);
void gfs_hook_set_default_view_index(int index, int nfrags);
void gfs_hook_set_default_view_section(char *section);
void gfs_hook_set_default_view_global(void);

* ファイル・ビューの変更

以下の API は，ファイル・デスクリプタで指定されるファイルのファイル・
ビューを変更します．引数は，一番はじめの引数を除き，
gfs_pio_set_view_local(3)，gfs_pio_set_view_index(3)，
gfs_pio_set_view_section(3) および gfs_pio_set_view_global(3) と同様で
す．

char *
gfs_hook_set_view_local(int fd, int flags);

char *
gfs_hook_set_view_index(int fd, int nfrags, int index, char *host, int flags);

char *
gfs_hook_set_view_section(int fd, char *section, char *host, int flags);

char *
gfs_hook_set_view_global(int fd, int flags);

$Id$
