dnl Process this file with autoconf to produce a configure script.
AC_INIT
AC_CONFIG_SRCDIR(ChangeLog)
AC_CONFIG_AUX_DIR(makes)
AC_CONFIG_HEADER(include/gfarm/gfarm_config.h)

# Determine target system
# This is called "host" on autotools, because its terminology is following:
# build system - system which is used to build a tool
# host system - system which is used to run a tool
# target system - system which is used to run a program generated by a tool
AC_CANONICAL_HOST

# "linux-gnu" -> "linux", "netbsdelf" -> "netbsd"
host_os_nickname=`echo $host_os |
	sed -e 's/-gnu$//' -e 's/[0-9.]*$//' -e 's/^netbsdelf$/netbsd/'`

######
###### Checks for programs.
######

AC_PROG_CC(cc gcc) # search cc before gcc
if test x"$GCC" = x"yes"; then # CFLAGS='-g -O2'
  CFLAGS="${CFLAGS} -Wall"
else # CFLAGS='-g'
  CFLAGS="-O" # don't use -g, but use -O
fi

AC_PROG_LEX
# the following definition should not be needed.
# but there is stupid environment which flex exists but libfl.a doesn't.
if test x"$LEX" = x"flex"; then
  AC_CHECK_LIB(fl, yywrap, [LEXLIB=-lfl], [LEXLIB=-ll])
fi

AC_PROG_YACC
AC_PROG_INSTALL
AC_PROG_LIBTOOL

######
###### parsing command line options
######

###
### --with-pthread=PTHREAD_ROOT, or --without-pthread
###

AC_ARG_WITH(pthread,
[  --with-pthread=PTHREAD_ROOT	pthread root directory
				[[default=/usr]]]
  --without-pthread             disable pthread support,
[with_pthread="${withval}"
])

if test x"${with_pthread}" = x""; then
  with_pthread=/usr
fi
if test ! -f "${with_pthread}"/include/pthread.h; then
  AC_MSG_WARN([could not find "${with_pthread}"/include/pthread.h])
  with_pthread=no
fi
if test x"${with_pthread}" = x"no"; then
  AC_MSG_RESULT([disabling pthread])
  pthread_srcs=
  pthread_objs=
  pthread_cflags=
  pthread_targets=
  pthread_includes=
  pthread_libs=
else
  AC_MSG_RESULT([using \"${with_pthread}\" as pthread root directory])
  pthread_srcs='$(PTHREAD_SRCS)'
  pthread_objs='$(PTHREAD_OBJS)'
  pthread_cflags='$(PTHREAD_CFLAGS)'
  pthread_targets='$(PTHREAD_TARGETS)'

  if test x"${with_pthread}" != x"/usr"; then # 3rd party library? e.g. pth
    pthread_includes=-I"${with_pthread}"/include/pthread.h
    pthread_libs="-L${with_pthread}/lib -lpthread"
  else # system supplied pthread library
    case ${host_os_nickname} in
    freebsd*)
        # FreeBSD-4.X needs -D_THREAD_SAFE, FreeBSD-5.X doesn't
	pthread_includes="-pthread -D_THREAD_SAFE"
	pthread_libs=-pthread;;
    osf1*)
	pthread_includes="-pthread"
	pthread_libs=;;
    *)
	pthread_includes=-pthread
	pthread_libs=-pthread;;
    esac
    # always define _REENTRANT
    pthread_includes="${pthread_includes} -D_REENTRANT"
  fi

 AC_DEFINE(HAVE_PTHREAD, 1, [pthread library exists])
fi

AC_SUBST(pthread_includes)
AC_SUBST(pthread_libs)
# for conditional compilation which depends on _LARGEFILE64_SOURCE API
AC_SUBST(pthread_srcs)
AC_SUBST(pthread_objs)
AC_SUBST(pthread_cflags)
AC_SUBST(pthread_targets)

### --with-openldap is handled later, because it needs AC_CHECK_LIB(nsl, ...)

###
### --with-openssl=OpenSSL_ROOT
###

AC_ARG_WITH(openssl,
[  --with-openssl=OpenSSL_ROOT	openssl root directory
				[[default=/usr]]],
[with_openssl="${withval}"
],
[with_openssl=/usr
])
AC_MSG_RESULT([using \"${with_openssl}\" as openssl root directory])

openssl_libs='-lssl -lcrypto'
if test x"${with_openssl}" = x"/usr"; then
   openssl_includes=
else
   openssl_includes="-I${with_openssl}/include"
   openssl_libs="-R${with_openssl}/lib -L${with_openssl}/lib ${openssl_libs}"
fi


AC_SUBST(openssl_includes)
AC_SUBST(openssl_libs)

###
### --with-globus=GLOBUS_ROOT --with-globus-flavor=FLAVOR -with-globus-static
###

AC_ARG_WITH(globus_static,
[  --with-globus-static		link static version of globus libraries instead of shared version
				[[default=disable]]],
[globus_static="${withval}"
],
[globus_static=""
])



AC_ARG_WITH(globus_flavor,
[  --with-globus-flavor=FLAVOR	globus flavor name
				[[default=guessed]]],
[globus_flavor="${withval}"
],
[globus_flavor=
])

AC_SUBST(globus_flavor)


AC_ARG_WITH(globus,
[  --with-globus=GLOBUS_ROOT	globus root directory
				[[default=disable]]],
[globus_location="${withval}"
 case "${globus_location}" in yes) globus_location=${GLOBUS_LOCATION};; esac

 AC_MSG_CHECKING([globus])
 GLBlocation_candidates=${globus_location:-/usr/grid}
 if test -n "$globus_flavor"; then
	GLBflavor_candidates="$globus_flavor"
 else
	GLBflavor_candidates=
	if test x"$GCC" = x"yes"; then
		tmp='gcc vendorcc'
	else
		tmp='vendorcc gcc'
	fi
	for GLBbits in 64 32; do
		for GLBcc in $tmp; do
			for GLBdebug in "" dbg; do
				for GLBpthread in "" pthr; do
					GLBflavor_candidates="$GLBflavor_candidates $GLBcc$GLBbits$GLBdebug$GLBpthread"
				done
			done
		done
	done
 fi
 globus_found=
 for d in ${GLBlocation_candidates}; do
	for f in ${GLBflavor_candidates}; do
		if test -f "$d/include/$f/gssapi.h"; then
			globus_location=$d
			globus_flavor=$f
			globus_found=yes
			break
		fi
	done
	if test x"$globus_found" = x"yes"; then break; fi
 done
 if test x"$globus_found" != x"yes"; then
	AC_MSG_RESULT([not found])
	AC_MSG_RESULT([searched directories are: ${GLBlocation_candidates}])
	AC_MSG_RESULT([searched flavors are: ${GLBflavor_candidates}])
	AC_MSG_ERROR([aborted])
	exit 1
 fi
 AC_MSG_RESULT([found in \"${globus_location}\" with \"${globus_flavor}\" flavor])

 globus_includes='-I$(globus_location)/include/$(globus_flavor)'
 globus_libdir='$(globus_location)/lib'

 cfgmhtmp=/tmp/cfgmh$$
 AC_MSG_CHECKING([globus library names])
 if	case ${globus_static} in
	yes)	env GLOBUS_LOCATION=${globus_location} ${globus_location}/bin/globus-makefile-header -static -flavor=${globus_flavor} globus_gssapi_gsi;;
	*)	env GLOBUS_LOCATION=${globus_location} ${globus_location}/bin/globus-makefile-header         -flavor=${globus_flavor} globus_gssapi_gsi;;
	esac > $cfgmhtmp
 then
	AC_MSG_RESULT([done])
 else
	rm -f $cfgmhtmp
	AC_MSG_ERROR([failed to call globus-makefile-header, aborted])
 fi
 globus_gssapi_libs=`sed -n '/^GLOBUS_PKG_LIBS *=/s///p' $cfgmhtmp`
 rm -f $cfgmhtmp
 case ${globus_static} in
 yes)	:;;
 *)	globus_gssapi_libs="-R${globus_libdir} -L${globus_libdir} $globus_gssapi_libs"
 esac

 # for conditional compilation which depends on whether globus is enabled or not
 globus_srcs='$(GLOBUS_SRCS)'
 globus_objs='$(GLOBUS_OBJS)'
 globus_cflags='$(GLOBUS_CFLAGS)'
 globus_targets='$(GLOBUS_TARGETS)'

 openssl_includes='$(globus_includes)'
 case ${globus_static} in
 yes)	openssl_libs="${globus_libdir}"'/libssl_$(globus_flavor).a '"${globus_libdir}"'/libcrypto_$(globus_flavor).a'
	AC_MSG_RESULT([using globus static library: yes]);;
 *)	openssl_libs="-R${globus_libdir} -L${globus_libdir} "'-lssl_$(globus_flavor) -lcrypto_$(globus_flavor)'
	AC_MSG_RESULT([using globus static library: no]);;
 esac

 AC_DEFINE(HAVE_GSI, 1, [Grid Security Infrastructure exists])
],
[globus_location=
 globus_includes=
 globus_gssapi_libs=

 # for conditional compilation which depends on whether globus is enabled or not
 globus_srcs=
 globus_objs=
 globus_cflags=
 globus_targets=
])

AC_SUBST(globus_location)
AC_SUBST(globus_includes)
AC_SUBST(globus_gssapi_libs)

# for conditional compilation which depends on whether globus is enabled or not
AC_SUBST(globus_srcs)
AC_SUBST(globus_objs)
AC_SUBST(globus_cflags)
AC_SUBST(globus_targets)

###
### --with-mpi=MPI_ROOT
###

AC_ARG_WITH(mpi,
[  --with-mpi=MPI_ROOT		MPI root directory
				[[default=disable]]],
[with_mpi="${withval}"
 if test x"${withval}" = x'yes'; then
  mpicc="mpicc"
 else
  mpicc="${with_mpi}/bin/mpicc"
 fi
 AC_MSG_RESULT([using \"${mpicc}\" to compile MPI programs])

 # for conditional compilation which depends on whether MPI is enabled or not
 mpi_srcs='$(MPI_SRCS)'
 mpi_objs='$(MPI_OBJS)'
 mpi_srcs='$(MPI_CFLAGS)'
 mpi_targets='$(MPI_TARGETS)'
],
[with_mpi=

 mpicc=
 # for conditional compilation which depends on whether MPI is enabled or not
 mpi_srcs=
 mpi_objs=
 mpi_cflags=
 mpi_targets=
])

AC_SUBST(mpicc)
# for conditional compilation which depends on whether globus is enabled or not
AC_SUBST(mpi_srcs)
AC_SUBST(mpi_objs)
AC_SUBST(mpi_cflags)
AC_SUBST(mpi_targets)

### The following options are all "ns" specific

###
### --with-readline=READLINE_ROOT
###

AC_ARG_WITH(readline,
[  --with-readline=READLINE_ROOT	readline root directory
				[[default=disable]]],
[with_readline="${withval}"
],
[with_readline=
])

readline_found=
if test x"${with_readline}" = x"yes"; then
  for d in /usr/local /usr/pkg /usr
  do
    if test -f $d/include/readline/readline.h; then
	with_readline=$d
	AC_MSG_RESULT([using \"${d}\" as readline root directory])
	readline_found=yes
	break
    fi
  done
  if test x"${readline_found}" != x"yes"; then
	AC_MSG_ERROR([readline is not found, aborted])
  fi
fi

if test -n "${with_readline}"; then
  readline_includes="-DUSE_READLINE"
  readline_libs="-lreadline -ltermcap"
  if test x"${with_readline}" != x"/usr"; then
    readline_includes="-I${with_readline}/include ${readline_includes}"
    readline_libs="-R${with_readline}/lib -L${with_readline}/lib ${readline_libs}"
  fi
else
  readline_includes=
  readline_libs=
fi

AC_SUBST(readline_includes)
AC_SUBST(readline_libs)

###
### --with-default-ns-server=HOSTNAME
###

AC_ARG_WITH(default_ns_server,
[  --with-default-ns-server=HOSTNAME	default hostname of ns server
				[[default=localhost]]],
[default_ns_server="${withval}"], [default_ns_server='localhost'])
AC_SUBST(default_ns_server)

###
### --with-default-ns-port=PORTNUMBER
###

AC_ARG_WITH(default_ns_port,
[  --with-default-ns-port=PORTNUMBER	default port number of ns server
				[[default=5000]]],
[default_ns_port="${withval}"], [default_ns_port='5000'])
AC_SUBST(default_ns_port)

###
### --with-default-ns-exec-root=DIR
###

AC_ARG_WITH(default_ns_exec_root,
[  --with-default-ns-exec-root=DIR	default top directory of ns_exec
				[[default=PREFIX]]],
[default_ns_exec_root="${withval}"
 default_ns_exec_bindir="${default_ns_exec_root}/bin"
],
[default_ns_exec_root='$(prefix)'
 default_ns_exec_bindir='$(bindir)'
])

AC_SUBST(default_ns_exec_root)
AC_SUBST(default_ns_exec_bindir)

###
### --with-gfarm-rsh=RSH_COMMAND
###

AC_ARG_WITH(gfarm_rsh,
[  --with-gfarm-rsh=RSH		command name equivalent to rsh
				[[default=rsh]]],
[gfarm_rsh="${withval}"], [gfarm_rsh='rsh'])
AC_SUBST(gfarm_rsh)

###
### --with-gfarmd-username=DIR
###

AC_ARG_WITH(gfarmd_username,
[  --with-gfarmd-username=DIR	default username of gfarmd
				[[default=nobody]]],
[gfarmd_username="${withval}"], [gfarmd_username='nobody'])
AC_SUBST(gfarmd_username)

###### 
###### Checks for libraries.
###### 

### check sanity of $CC, $CFLAGS and $CPPFLAGS

AC_CHECK_HEADERS(stdio.h)
if test x"${ac_cv_header_stdio_h}" != x"yes"; then
	AC_MSG_RESULT([preprocessor option error on: \"$ac_cpp\"])
	#exit 1
fi

### check sanity of $CC, $CFLAGS, $CPPFLAGS and $LDFLAGS setting

AC_CHECK_FUNCS(printf)
if test x"${ac_cv_func_printf}" != x"yes"; then
	AC_MSG_RESULT([linker option error on: \"$ac_link\"])
	exit 1
fi

AC_CHECK_LIB(nsl, gethostname)
AC_CHECK_LIB(socket, socket)
AC_CHECK_LIB(crypt, crypt)
AC_CHECK_LIB(compat, cuserid)
AC_CHECK_LIB(gen, basename)
AC_CHECK_LIB(rt, fdatasync)

### use 64bit off_t, if possible.

AC_MSG_CHECKING([Large File extention for 64bit off_t])
if ( getconf LFS_CFLAGS &&
     getconf LFS_LDFLAGS &&
     getconf LFS_LIBS ) > /dev/null 2>&1; then
	AC_MSG_RESULT([yes])

	largefile_cflags="`getconf LFS_CFLAGS`"
	largefile_ldflags="`getconf LFS_LDFLAGS`"
	LIBS="$LIBS `getconf LFS_LIBS`"

	if test x"$host_os" = x"linux-gnu"; then
		# glibc requires _GNU_SOURCE for pwrite64(2)
		largefile_cflags="${largefile_cflags} -D_GNU_SOURCE"
	fi

else
	AC_MSG_RESULT([no])

	largefile_cflags=
	largefile_ldflags=
fi

AC_SUBST(largefile_cflags)
AC_SUBST(largefile_ldflags)

### is _LARGEFILE64_SOURCE API supported? i.e. can be _LFS64_LARGEFILE=1?

AC_MSG_CHECKING([_LARGEFILE64_SOURCE API])
if ( getconf LFS64_CFLAGS &&
     getconf LFS64_LDFLAGS &&
     getconf LFS64_LIBS ) > /dev/null 2>&1; then
	AC_MSG_RESULT([yes])

	largefile64_srcs='$(LARGEFILE64_SRCS)'
	largefile64_objs='$(LARGEFILE64_OBJS)'
	largefile64_cflags='$(LARGEFILE64_CFLAGS)'
	largefile64_targets='$(LARGEFILE64_TARGETS)'
else
	AC_MSG_RESULT([no])

	largefile64_srcs=
	largefile64_objs=
	largefile64_cflags=
	largefile64_targets=
fi

# for conditional compilation which depends on _LARGEFILE64_SOURCE API
AC_SUBST(largefile64_srcs)
AC_SUBST(largefile64_objs)
AC_SUBST(largefile64_cflags)
AC_SUBST(largefile64_targets)

###
### --with-openldap=OpenLDAP_ROOT
###

AC_ARG_WITH(openldap,
[  --with-openldap=OpenLDAP_ROOT	openldap root directory
				[[default=guessed]]],
[with_openldap="${withval}"
],
[with_openldap=
])

openldap_found=
if test x"${with_openldap}" = x -o x"${with_openldap}" = x"yes"; then
  for d in /usr/local/openldap /usr/local /usr/pkg /usr
  do
    if test -f $d/include/ldap.h; then
	with_openldap=$d
	openldap_found=yes
	break
    fi
  done
  if test x"${openldap_found}" != x"yes"; then
	AC_MSG_ERROR([openldap is not found, aborted])
  fi
fi
AC_MSG_RESULT([using \"${with_openldap}\" as openldap root directory])

if test x"${with_openldap}" = x"/usr"; then
  ldap_includes=""
  ldflags=""
else
  ldap_includes="-I${with_openldap}/include"
  ldflags="-R${with_openldap}/lib -L${with_openldap}/lib"
fi

# OpenLDAP since 2.x calls res_query() and dn_expand(), if dnssrv is
# configured, and DNS resolver library doesn't belongs to libc on some
# systems.
# But we cannot blindly link libresolv, because it may change behaviour
# of gethostbyname() and friends.

CPPFLAGS_SAVE="$CPPFLAGS"
LIBS_SAVE="$LIBS"

openldap_found=
for libs in "-lldap -llber" "-lldap"; do
for extra_lib in "" "-lresolv" "-lbind"; do

CPPFLAGS="$CPPFLAGS_SAVE ${ldap_includes}"
LIBS="${ldflags} ${libs} ${extra_lib} $LIBS_SAVE"

AC_TRY_LINK([
#include <lber.h>
#include <ldap.h>],[
	LDAP *ldap_server = ldap_open("example.com", 389);
], [
	if test x"${extra_lib}" != x; then
		AC_MSG_RESULT([using ${extra_lib} for LDAP])
		ldap_libs="${ldflags} ${libs} ${extra_lib}"
	else
		ldap_libs="${ldflags} ${libs}"
	fi
	openldap_found=yes
	AC_CHECK_FUNCS(ldap_memfree)
	break 2
 ], [])

done # extra_lib
done # libs
if test x"${openldap_found}" != x"yes"; then
	AC_MSG_ERROR([openldap cannot be linked, aborted])
fi
AC_MSG_RESULT([using \"${ldap_includes} ${ldap_libs}\" for ldap])

CPPFLAGS="$CPPFLAGS_SAVE"
LIBS="$LIBS_SAVE"

AC_SUBST(ldap_includes)
AC_SUBST(ldap_libs)

###### 
###### Checks for header files.
###### 

AC_CHECK_HEADERS(inttypes.h shadow.h crypt.h machine/endian.h attr/xattr.h)

###### 
###### Checks for types.
###### 

AC_C_BIGENDIAN

AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(long long)

### socklen_t is available?

AC_TRY_LINK([
#include <sys/types.h>
#include <sys/socket.h>],[
int rv, s;
struct sockaddr addr;
socklen_t len;

rv = bind(s, &addr, len);
], [ax_cv_have_socklen_t=yes], [ax_cv_have_socklen_t=no])
if test "$ax_cv_have_socklen_t" = no; then

  # determine size of socklen_t

  AC_TRY_RUN([
# include <sys/types.h>
# include <sys/socket.h>

  main() {
	struct msghdr h;

	/* h.msg_namelen should be socklen_t */
	h.msg_namelen = -1;
	if (sizeof(h.msg_namelen) == sizeof(int) && h.msg_namelen < 0)
		return (0); /* int */
	else
		return (1); /* size_t */
  }
  ], [ax_cv_socklen_t=int], [ax_cv_socklen_t=size_t])

  AC_DEFINE_UNQUOTED(socklen_t, $ax_cv_socklen_t,
   [3rd argument type of bind(2)/connect(2), if <sys/socket.h> doesn't define])
fi

###### Checks for structures.
# empty for now

###### Checks for compiler characteristics.
# empty for now

###### 
###### Checks for library functions.
###### 

AC_CHECK_FUNCS(fdatasync poll pread pwrite snprintf gethostbyname2 getpassphrase mkdtemp setlogin strtoll strtoq setrlimit daemon getloadavg statvfs statfs)

### SUSv2 getpwnam_r() has 5 args, but Solaris's only has 4.

AC_TRY_LINK([
#include <sys/types.h>
#include <pwd.h>],[
int rv;
struct passwd *pwd;
char buffer[1024];

rv = getpwnam_r("root", pwd, buffer, sizeof buffer, &pwd);
], [ax_cv_have_getpwnam_r=yes], [ax_cv_have_getpwnam_r=no])
if test "$ax_cv_have_getpwnam_r" = yes; then
  AC_DEFINE(HAVE_GETPWNAM_R, 1,
	[5 arguments getpwnam_r() which is compatible with SUSv2 exists])
fi

### SUSv2 getspnam_r() has 5 args, but Solaris's only has 4.

AC_TRY_LINK([
#include <shadow.h>],[
int rv;
struct spwd *sp;
char buffer[1024];

rv = getspnam_r("root", sp, buffer, sizeof buffer, &sp);
], [ax_cv_have_getspnam_r=yes], [ax_cv_have_getspnam_r=no])
if test "$ax_cv_have_getspnam_r" = yes; then
  AC_DEFINE(HAVE_GETSPNAM_R, 1, [5 arguments getspnam_r() exists])
fi

### Solaris no longer defines sys_nerr/sys_errlist

AC_TRY_LINK([
#include <stdio.h>
#include <errno.h>],[
int i = sys_nerr;
], [ax_cv_have_sys_nerr=yes], [ax_cv_have_sys_nerr=no])
if test "$ax_cv_have_sys_nerr" = yes; then
  AC_DEFINE(HAVE_SYS_NERR, 1, [sys_nerr is defined])
fi

###### Checks for system services.
# empty for now

######
###### miscellaneous
######

###
### config.h template
###

AH_TOP([
#ifndef GFARM_CONFIG_H
#define GFARM_CONFIG_H
])

AH_BOTTOM([
#if SIZEOF_LONG == 8
	typedef long file_offset_t;
#	define FILE_OFFSET_T_IS_FLOAT		0
#	define FILE_OFFSET_T_MAX		0x7fffffffffffffffL
#	define file_offset_floor(offset)	(offset)
#	define PR_FILE_OFFSET "ld"
#	define CAST_PR_FILE_OFFSET
#	define string_to_file_offset(s, endptr)	strtol(s, endptr, 0)
#elif SIZEOF_LONG_LONG == 8
	typedef long long file_offset_t;
#	define FILE_OFFSET_T_IS_FLOAT		0
#	define FILE_OFFSET_T_MAX		0x7fffffffffffffffLL
#	define file_offset_floor(offset)	(offset)
#  if defined(HAVE_STRTOLL) || defined(HAVE_STRTOQ)
#	define PR_FILE_OFFSET "lld"
#	define CAST_PR_FILE_OFFSET
#    if defined(HAVE_STRTOLL)
#	define string_to_file_offset(s, endptr)	strtoll(s, endptr, 0)
#    else
#	define string_to_file_offset(s, endptr)	strtoq(s, endptr, 0)
#    endif
#  else
#	define PR_FILE_OFFSET ".0f"
#	define CAST_PR_FILE_OFFSET		(double)
#	define string_to_file_offset(s, endptr)	(long long)strtod(s, endptr)
#  endif
#else
	/*
	 * With IEEE floating point, usually double has 53bits fraction,
	 * 10bits biased exponent, and 1 sign bit.
	 * Thus, this can represent -8192T (== -2^53) ... +8192T (== 2^53).
	 */
	typedef double file_offset_t;
#	define FILE_OFFSET_T_IS_FLOAT		1
#	define FILE_OFFSET_T_MAX		9007199254740991.0 /* 2^53-1 */
#	define file_offset_floor(offset)	floor(offset)
#	define PR_FILE_OFFSET ".0f"
#	define CAST_PR_FILE_OFFSET
#	define string_to_file_offset(s, endptr)	strtod(s, endptr)
#endif

#endif /* GFARM_CONFIG_H */
])

###
### lib/gfs_hook
###

# need to make system dependent source?

gfs_hook_sysdep=lib/gfs_hook/sysdep/${host_os_nickname}
if test -f ${srcdir}/${gfs_hook_sysdep}/Makefile; then
	AC_MSG_RESULT([using ${gfs_hook_sysdep} directory for system dependent objects.])
	gfs_hook_sysdep_subdir=${host_os_nickname}
else
	gfs_hook_sysdep_subdir=default
fi

AC_SUBST(gfs_hook_sysdep_subdir)

###
### ns
###

if test -d ${srcdir}/ns; then
	ns_makefiles='
		ns/nslib/Makefile
		ns/gfarmd/Makefile
		ns/nstool/file/Makefile'

	# The following is for --srcdir option.
	# AC_OUTPUT() assumes that parent directory of the Makefile exists
	test -d ns || mkdir -p ns
	test -d ns/nstool || mkdir -p ns/nstool
fi


# The following is for --srcdir option.
# AC_OUTPUT() assumes that parent directory of the Makefile exists
test -d include || mkdir -p include
test -d gfptool || mkdir -p gfptool
test -d package || mkdir -p package
test -d util || mkdir -p util

AC_CONFIG_FILES(Makefile makes/config.mk
	${ns_makefiles}
	gfptool/util/gfregister
	package/solaris/gfmd package/solaris/gfsd
	package/redhat/gfmd package/redhat/gfsd
	package/redhat/config/config-gfarm package/redhat/config/config-gfsd
	util/gfront/gfront
)
AC_OUTPUT
