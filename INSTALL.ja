グリッドデータファームシステムソフトウェア Gfarm

● Gfarm システムの概要

Gfarm システムは複数組織で高信頼なデータ共有，高速なデータアクセスを実
現し，大規模データ処理サービス，データインテンシブコンピューティングを
グリッド上で可能とするためのシステムソフトウェアです．データ参照局所性
を利用し，データのネットワーク移動を抑えることにより，高速入出力，高速
並列処理を実現します．

そのため，Gfarm システムでは，耐故障性を備えた広域仮想ファイルシステム
の Gfarm ファイルシステムと，そのファイルシステムを利用した分散並列処理
環境を提供します．

Gfarm ファイルシステムは，インターネット上に分散して存在する PC のディ
スクを統合して構成される共有仮想ファイルシステムです．それぞれの PC で
は gfsd と呼ばれる I/O デーモンが走り，PC のディスクへのアクセスを安全
かつ効率的に可能とします．Gfarm ファイルシステムにおけるファイルは
Gfarm ファイルあるいはスーパーファイルと呼ばれ，任意の数のファイルから
構成されます．それぞれの構成ファイルは，分散する PC のディスクに配置さ
れます．それら構成ファイルは複製され，分散して配置され，PC やディスク，
ネットワークなどの故障時でも，どれかの複製にアクセス可能である限りアク
セスが可能です．また，ファイルの複製はアクセス集中を回避する目的にも利
用されます．

どのファイルがどこに格納されているか，などのファイルシステムメタデータ
は Gfarm メタデータサーバにより管理されます．

Gfarm ファイルシステムは，Gfarm 並列入出力 APIのほか，殆んどの POSIX 入
出力 API で利用することができるため，従来のアプリケーションもソースコー
ドの修正なしに，あたかもローカルのファイルシステムのように Gfarm ファイ
ルシステムを利用することができます．

また，Gfarm システムでは，Gfarm ファイルシステムを構成する PC でプログ
ラムを実行することができます．特に，ファイルを所持する PC で遠隔実行す
ることにより，ネットワーク上のデータ転送を抑え，効率的にファイルをアク
セスすることができます．さらに，任意の数のファイルからなる Gfarm ファイ
ルに対しては，分散格納された構成ファイルを所持する PC における分散並列
実行により，高速な並列データアクセス，並列データ処理を行うことができま
す．

グリッドデータファームの詳細は，以下の論文を参照してください．

[1] 建部 修見，森田 洋平，松岡 聡，関口 智嗣，曽田 哲之，
   「ペタバイトスケールデータインテンシブコンピューティングのための 
     Grid Datafarm アーキテクチャ」，
    情報処理学会論文誌：ハイパフォーマンスコンピューティングシステム，
    情報処理学会，Vol.43，No.SIG 6 (HPS 5)，pp.184-195，2002 年

========================================================================

● Gfarm システムの構成要素

Gfarm システムは，下記の種類のホストから構成されます．

・クライアント

  ユーザが Gfarm を利用するホストです．

・ファイルシステムノード

  CPU と，Gfarm ファイルシステムのディスクを提供するホスト群です．
  広域に存在する数千ノード，数万ノードも想定されています．それぞれのノー
  ド上では I/O デーモンの gfsd が走ります．

・メタデータサーバ

  Gfarm ファイルシステムのメタデータと，ユーザがリクエストした並列プロ
  セスを管理するホストです．並列プロセスはファイルシステムノードのホス
  ト群で実行されることになります．ホスト上では gfmd および LDAPサーバ
  (slapd) が走ります．

Gfarm ファイルシステムは，大容量ファイルを，ファイルシステムノード上の
複数のホストに分散して配置します．この分散されたファイルの個々をファイ
ル断片と呼びます．ファイルシステムノード上のホストそれぞれが，自ホスト
上に存在するファイル断片を処理するような，データ並列処理アプリケーショ
ンをグリッドサービスとして支援することが，Gfarm システムの主な目的です．

例えば，「gfrun gfarm:gfgrep -o gfarm:output 正規表現 gfarm:input」を
実行すると，引数で指定した Gfarm ファイル ``gfarm:input'' が分散配置さ
れているファイルシステムノード上で，コマンド gfarm:gfgrep が並列実行さ
れ，出力ファイル gfarm:output が並列に生成されます．

========================================================================

● ソフトウェア構成

Gfarm ソフトウェアは，大きく下記の項目に分類されます．

・libgfarm.a ライブラリ

  Gfarm のもとで走るアプリケーション・プログラムにリンクされる
  ライブラリです．Gfarm の並列ファイルシステムのライブラリ・インタフェー
  スや，ユーティリティ関数からなります．

  並列ファイルシステムは，内部的には LDAP サーバーを利用した，Gfarm メ
  タデータベース・ライブラリを用いて実装されています．

  既存アプリケーションで Gfarm ファイルシステムを利用するためのライブ
  ラリ gfs_hook.o も準備されています．この場合，プログラムリンク時に 
  gfs_hook.o と libgfarm.a をいっしょにリンクするだけで，Gfarm ファイ
  ルシステムが利用できるようになります．

  gfs_hook.o の利用に関しては，doc/README.hook.en をご参照ください．

・gfmd - Gfarm メタデータサーバ

  メタデータサーバ・マシン上で動作するデーモンプログラムです．
  現状の実装では，実行中のプロセス情報のみを管理しており，
  ファイルシステムメタデータサーバの機能は果たしていません．ファイルシ
  ステムメタデータサーバは LDAP サーバを直接利用しています．

・gfsd - Gfarm ファイルシステム・デーモン

  ファイルシステムノード上の全ホストで動作するデーモンプログラムです．
  Gfarm ファイルのアクセス機能を提供し，Gfarm ファイルシステムを構成し
  ます．

・Gfarm コマンドツール

  gfls, gfrm, gfwhere, gfrep などのファイルシステムコマンド，gfreg,
  gfexport などのファイル管理コマンド，gfps, gfrun などのプロセス管理，
  実行コマンド，およびファイルシステムノード管理コマンド gfhost，認証
  キー管理ツール gfkey などからなります．
  
  さらに，gfptool/ ディレクトリ以下には，gfcp, gfgrep などの並列 Gfarm
  コマンドがあります．

・Gfarm サンプル・プログラム

  Gfarm 並列ファイルシステムにファイルを取り込むコマンドのコーディング
  例として，gfimport_fixed および gfimport_text を用意しました．

========================================================================

● 構築方法

この項では，ソースからの構築について説明します．
バイナリ配布を利用されている方は，この項の説明は読み飛ばして構いません．

今回のシステムは，Linux 上で実行テストされています．
構築に関しては NetBSD, Solaris 上でテストされています．

システムの構築のためには，OpenLDAP と OpenSSL ライブラリが必要です．認
証方式として GSI を利用するためには，GSSAPI ライブラリが必要となります．
現在の configure では GSSAPI ライブラリとして Globus toolkit version 2
(GT2) に含まれるライブラリをサポートしています．また，既存の MPI アプ
リケーションで Gfarm ファイルシステムを利用するためのライブラリ
gfs_hook_mpi.o の構築，および MPI サンプルアプリケーションの構築，実行
するためには MPI が必要となります．

また、Linux で glibc-2.2.93 ないし glibc-2.3 以降を利用しているディス
トリビューションでは、libattr およびその開発パッケージも必要です。
RedHat Linux を例にとると、RedHat 8 以降を利用している場合は、
libattr および libattr-devel RPM パッケージをインストールする必要が
あります。

システムを構築するには，下記のようにします．

	% ./configure [オプション]
	% make
	% make install

configure コマンドには，下記のオプションがあります．
このうち，--with-openldap は必須です．

・--with-openldap=ディレクトリ

  OpenLDAP のインストールされているディレクトリを指定します．
  このオプションは必ず指定してください．

・--with-openssl=ディレクトリ

  OpenSSL のインストールされているディレクトリを指定します．
  オプション省略時は /usr が指定されます．

・--with-mpi=ディレクトリ

  MPI アプリケーションのサンプルプログラムおよび MPI プログラムのシス
  テムコールをフックするためのライブラリをコンパイルします．ディレクト
  リを指定した場合はコンパイラとして ${ディレクトリ}/bin/mpicc が利用
  され，省略時は mpicc は利用されます．このオプションは省略可能です．
  現在サポートされている MPI の実装は，MPICH/p4 のみです．

・--with-globus=ディレクトリ

  認証方式として GSI を可能とします．ディレクトリは Globus toolkit
  version 2 (GT2) のインストールされているディレクトリを指定します%．
  GT2 のうち GSSAPI ライブラリが必要となります．ディレクトリを指定しな
  いと，環境変数 GLOBUS_LOCATION の示すディレクトリが利用されます．
  このオプションは省略可能です．
  デフォールトでは，"gcc32" flavor でコンパイルされた Globus toolkit
  ライブラリをリンクします．これ以外の flavor を利用したい場合には，
  例えば --with-globus-flavor="gcc32dbg" のようにして flavor 名を指定して
  ください．

・--prefix=ディレクトリ

  インストール先のディレクトリを指定します．このオプションを省略した場
  合は /usr/local ディレクトリの下にインストールします．
  このオプションは省略可能です．

利用するコンパイラを明示したい場合には，環境変数 CC に，コンパイラのコ
マンド名を指定して configure を実行してください．以下は gcc を指定する
例です．

	% env CC=gcc ./configure [options]

========================================================================

● 設定方法

この章では，管理者が最初にどんな設定を行う必要があるかを解説します．

以下では，下記のような構成を仮定して解説します．

・Gfarm インストール・ディレクトリ

	/usr/grid

・OpenLDAP インストール・ディレクトリ

	/usr/local/openldap

・LDAP サーバーを実行するホスト

	ldap.example.com

・LDAP サーバーの利用する TCP ポート番号

	389

・LDAP サーバーの設定ファイルを置くディレクトリ

	/etc/gfarm-ldap

・LDAP データベースの初期設定内容を記述するファイル

	/etc/gfarm-ldap/initial.ldif

・LDAP のデータベース・ファイルを置くディレクトリ

	/var/gfarm-ldap

・LDAP の base distinguished name

	dc=example,dc=com

  この値は，LDAP で保持する情報の根となるノードの名称です．

  Gfarm システムを利用している組織のドメイン名が example.com であれば，
  そのドメイン名の各構成要素を dc= に指定して「dc=example,dc=com」の
  ような名前を決め，これを base distinguished name に使うと良いでしょ
  う．

・LDAP の organization name

	Example Com

・ファイルシステムノードに置く，データ・ファイル用スプール・ディレクト
  リ

	/var/spool/gfarm

------------------------------------------------------------------------

◇ LDAP サーバー

まず，Gfarm ファイルシステムのファイルシステムメタデータを保持する 
LDAP サーバーを用意する必要があります．

Gfarm バージョン 1.0.X では，OpenLDAP version 2.0.X および version
2.1.X で動作が確認されていますが，それ以外の LDAP サーバでは動作確認が
十分におこなわれていません．

▽ slapd.conf

OpenLDAP 付属の LDAP サーバーの設定ファイルです．Gfarm ファイルシステ
ムのためのスキーマファイルを include します．また，base distinguished
name を，このファイルの suffix および rootdn で参照しているのに注意し
てください．

以下に OpenLDAP version 2.0.X と OpenLDAP version 2.1.X のそれぞれの場
合における，ホスト ldap.example.com のファイル 
/etc/gfarm-ldap/slapd.conf 設定例を示します．設定ファイル中で include 
している core.schema のパス名は OpenLDAP のインストレーションにより変
わりますので気を付けてください．

------------------ ここから （OpenLDAP-2.0.X の場合）-----------------
#
# See slapd.conf(5) for details on configuration options.
# This file should NOT be world readable.
#
include         /etc/openldap/schema/core.schema
include         /etc/gfarm-ldap/gfarm.schema

pidfile         /var/run/gfarm-slapd.pid
argsfile        /var/run/gfarm-slapd.args

# enable global write access for now. XXX
defaultaccess write

# unlimit search result
sizelimit 2000000000

#######################################################################
# ldbm database definitions
#######################################################################

database        ldbm

suffix          "dc=example, dc=com"
rootdn          "cn=root, dc=example, dc=com"

directory       /var/gfarm-ldap
rootpw          secret-ldap-password

# Indices to maintain
index	objectClass	eq

index	pathname	pres,eq
index	section		pres,eq
index	hostname	pres,eq
#
dbnosync
------------------------------ ここまで ------------------------------

------------------ ここから （OpenLDAP-2.1.X の場合）-----------------
#
# See slapd.conf(5) for details on configuration options.
# This file should NOT be world readable.
#
include         /etc/openldap/schema/core.schema
include         /etc/gfarm-ldap/gfarm.schema

pidfile         /var/run/gfarm-slapd.pid
argsfile        /var/run/gfarm-slapd.args

# enable global write access for now. XXX
allow bind_anon_dn update_anon
access to * by anonymous write

# unlimit search result
sizelimit unlimited

#######################################################################
# ldbm database definitions
#######################################################################

database        bdb

suffix          "dc=example, dc=com"
rootdn          "cn=root, dc=example, dc=com"

directory       /var/gfarm-ldap
rootpw          secret-ldap-password

# Indices to maintain
index	objectClass	eq

index	pathname	pres,eq
index	section		pres,eq
index	hostname	pres,eq
------------------------------ ここまで ------------------------------

▽ gfarm.schema

slapd.conf から include されているファイルです．

ソース配布中のファイル doc/conf/gfarm.schema を，ホスト 
ldap.example.com の /etc/gfarm-ldap/gfarm.schema に置いてください．

バイナリ配布の場合，gfarm-server パッケージ中の
/etc/gfarm-ldap/gfarm.schema に，このファイルが含まれています．

特にカスタマイズする項目はありません．

▽ ファイルシステムメタデータの初期情報を作る

次に，メタデータサーバに登録する情報の初期設定を，アスキーファイルで作
成します．

このファイルには，LDAP の根となるノードの情報として，dn (distinguished
name) 属性に base distinguished name を，また objectclass 属性に top 
を設定します．

例えばホスト ldap.example.com のファイル /etc/gfarm-ldap/initial.ldif 
に，下記のような内容を設定することになります．

------------------------------ ここから ------------------------------
dn: dc=example, dc=com
objectclass: dcObject
objectclass: organization
objectclass: top
dc: example
o: Example Com
------------------------------ ここまで ------------------------------

▽ LDAP データベースの作成

前節で作成したファイルシステムメタデータの初期情報を元に，LDAP データ
ベースを作成します．これには，ホスト ldap.example.com で，下記のコマン
ドを実行します．

	% rm -f /var/gfarm-ldap/*
	% cd /etc/gfarm-ldap
	% /usr/local/openldap/sbin/slapadd -f slapd.conf -l initial.ldif

▽ LDAP サーバーの起動

ホスト ldap.example.com で，LDAP サーバーを起動します．下記のコマンド
を実行します．

	% cd /usr/local/openldap/libexec/
	% ./slapd -f /etc/gfarm-ldap/slapd.conf -h ldap://:389/

このオプション -h で指定した 389 が，LDAP サーバーのポート番号です．ポー
ト番号として，この例のように1024番未満を利用する場合，slapd の起動を 
root 権限で行なう必要があります．

▽ LDAP サーバーの動作試験

下記のコマンドを実行してみましょう．initial.ldif ファイルに設定したの
と同じ内容が表示されれば，正しく動作しています．

Bourne Shell の場合:
	% host=ldap.example.com
	% port=389
	% basedn='dc=example, dc=com'
	% cd /usr/local/openldap/bin
	% ./ldapsearch -x -b "$basedn" -L -h $host -p $port

csh の場合:
	% set host=ldap.example.com
	% set port=389
	% set basedn='dc=example, dc=com'
	% cd /usr/local/openldap/bin
	% ./ldapsearch -x -b "$basedn" -L -h $host -p $port

◇ ~/.gfarmrc

クライアントホストで ~/.gfarmrc を下記のように設定します．

------------------------------ ここから ------------------------------
metadb_serverhost ldap.example.com
ldap_serverhost ldap.example.com
ldap_serverport 389
ldap_base_dn "dc=example, dc=com"
auth enable sharedsecret *
------------------------------ ここまで ------------------------------

▽ ファイルシステムノードの登録

LDAP サーバーを起動したら，gfhost コマンドを利用して，ファイルシステム
ノードの情報を登録します．

ファイルシステムノードを構成するホストの情報には，下記のような項目があ
ります．

・hostname

    gfhost コマンドの引数として指定します．
    FQDN (fully qualified domain name) で指定してください．

・hostalias

    複数のネットワークインターフェースを持ち，それぞれのインターフェース
    に異なるホスト名が与えられている場合，gfhost コマンドの，hostname
    に続く引数で，それらのホスト名を指定することができます．
    物理的なネットワークインターフェースが１つだけしかないホストでは，
    特に指定しません．

・architecture

    計算機アーキテクチャを表す名称を sparc-sun-solaris8 のような
    形式で記述します．
    gfhost コマンドの -a オプションの引数として指定します．

・ncpu

    そのコンピュータのCPU数を記述します．
    gfhost コマンドの -n オプションの引数として指定します．
    このオプションは省略可能です．

例えば下記のようなコマンドで設定することになります．
オプション -c は，登録を指示するコマンドです．

	% gfhost -c -a i386-redhat8.0-linux linuxhost-1.example.com
	% gfhost -c -a i386-redhat8.0-linux linuxhost-2.example.com
	% gfhost -c -a i386-redhat8.0-linux linuxhost-3.example.com
	% gfhost -c -a i386-redhat8.0-linux linuxhost-4.example.com
	% gfhost -c -a i386-debian3.0-linux -n 2 linuxhost-5.example.com
	% gfhost -c -a i386-debian3.0-linux -n 2 linuxhost-6.example.com
	% gfhost -c -a sparc-sun-solaris8 solarishost-1.example.com
	% gfhost -c -a sparc-sun-solaris8 solarishost-2.example.com
	% gfhost -c -a alpha-hp-osf5.0 osfhost-1.example.com
	% gfhost -c -a mips-sgi-irix6.5 -n 16 irixhost-1.example.com

登録結果は，オプション -M を指定して gfhost を実行することで，確認でき
ます．

	% gfhost -M
	i386-redhat8.0-linux 1 linuxhost-1.example.com
	i386-redhat8.0-linux 1 linuxhost-2.example.com
	i386-redhat8.0-linux 1 linuxhost-3.example.com
	i386-redhat8.0-linux 1 linuxhost-4.example.com
	i386-debian3.0-linux 2 linuxhost-5.example.com
	i386-debian3.0-linux 2 linuxhost-6.example.com
	sparc-sun-solaris8 1 solarishost-1.example.com
	sparc-sun-solaris8 1 solarishost-2.example.com
	alpha-hp-osf5.0 1 osfhost-1.example.com
	mips-sgi-irix6.5 16 irixhost-1.example.com

------------------------------------------------------------------------

◇ gfsd スプール・ディレクトリの作成

ファイルシステムノード上の全ホストで，スプール・ルート・ディレクトリ
/var/spool/gfarm を作成します．

	% su
	Password: 
	# mkdir /var/spool/gfarm
	# chmod 1777 /var/spool/gfarm
	# exit
	% 

◇ /etc/gfarm.conf

メタデータサーバのホストと，ファイルシステムノード上の全ホストで，
/etc/gfarm.conf を下記のように設定します．

------------------------------ ここから ------------------------------
spool /var/spool/gfarm
metadb_serverhost ldap.example.com
ldap_serverhost ldap.example.com
ldap_serverport 389
ldap_base_dn "dc=example, dc=com"
auth enable sharedsecret *
------------------------------ ここまで ------------------------------

メタデータサーバのホストあるいはファイルシステムノードがクライアントと
なる場合は，クライアントプログラムはまず ~/.gfarmrc を読み込み，次に
/etc/gfarm.conf を読み込みます．

◇ gfmd

メタデータサーバ用マシン上で，root 権限で gfmd を立ち上げます．gfmd は，
前節で解説した /etc/gfarm.conf ファイルを設定ファイルとして読み込みま
す．

バイナリ配布を利用している場合，スタートアップ用に，次のスクリプトが用
意されています．
	RedHat Linux:		/etc/rc.d/init.d/gfmd
	Debian GNU/Linux:	/etc/init.d/gfmd
	Solaris:		/etc/rc3.d/S98gfmd

ソース配布を利用している場合，make が完了すると package/<OS>/gfmd にス
タートアップスクリプトが作成されます．ただし Debian GNU/Linux の場合，
debian/gfmd.init にスタートアップスクリプトがあります．このスクリプト
を，上記バイナリ配布の記述にあるファイル名にコピーしてchmod +x してく
ださい．

スタートアップスクリプトを用いて起動する手順は下記の通りとなります．
	RedHat Linux:
		% su
		Password: 
		# /sbin/chkconfig --add gfmd
		# /etc/rc.d/init.d/gfmd start
	Debian GNU/Linux:
		% su
		Password: 
		# /etc/init.d/gfmd start
	Solaris:
		% su
		Password: 
		# /etc/rc3.d/S98gfmd start

スクリプトを使わずに直接起動する場合には，下記の手順になります．
	% su
	Password: 
	# /usr/grid/sbin/gfmd

なお，テストなどの目的で gfmd をユーザ権限で立ち上げたい場合は -f オプ
ションをつけて設定ファイルを指定して立ち上げます．詳細は man gfmd を参
照してください．gfmd をユーザ権限で立ち上げた場合に利用可能な認証方式
は，共有秘密鍵方式 (sharedsecret) のみです．

gfmd が正しく起動されているかどうかは，オプションを指定せずに gfps コ
マンドを実行することで確認できます．正しく起動されている場合は，なにも
表示せずに，即座に実行を完了します．

	% gfps

◇ gfsd

ファイルシステムノードを構成する全ホストにおいて，root 権限で gfsd を
立ち上げます．gfsd は，前節で解説した /etc/gfarm.conf ファイルを設定ファ
イルとして読み込みます．

バイナリ配布を利用している場合，スタートアップ用に，次のスクリプトが用
意されています．
	RedHat Linux:		/etc/rc.d/init.d/gfsd
	Debian GNU/Linux:	/etc/init.d/gfsd
	Solaris:		/etc/rc3.d/S99gfsd

ソース配布を利用している場合，make が完了すると package/<OS>/gfsd にス
タートアップスクリプトが作成されます．ただし Debian GNU/Linux の場合，
debian/gfsd.init にスタートアップスクリプトがあります．このスクリプト
を，上記バイナリ配布の記述にあるファイル名にコピーしてchmod +x してく
ださい．

スタートアップスクリプトを用いて起動する手順は下記の通りとなります．
	RedHat Linux:
		% su
		Password: 
		# /sbin/chkconfig --add gfsd
		# /etc/rc.d/init.d/gfsd start
	Debian GNU/Linux:
		% su
		Password: 
		# /etc/init.d/gfsd start
	Solaris:
		% su
		Password: 
		# /etc/rc3.d/S99gfsd start

スクリプトを使わずに直接起動する場合には，下記の手順になります．
	% su
	Password: 
	# /usr/grid/sbin/gfsd

なお，テストなどの目的で gfsd をユーザ権限で立ち上げたい場合は -f オプ
ションをつけて設定ファイルを指定して立ち上げます．詳細は man gfsd を参
照してください．gfsd をユーザ権限で立ち上げた場合に利用可能な認証方式
は，共有秘密鍵方式 (sharedsecret) のみです．

gfsd が正しく起動されているかどうかは，オプション -l を指定して gfhost 
を実行することで確認できます．行頭に表示されている3つの数字はロード・
アベレージ，その次の一文字は用いられる認証方法です．

	% gfhost -l
	0.00/0.00/0.00 s i386-redhat8.0-linux 1 linuxhost-1.example.com
	0.00/0.00/0.00 s i386-redhat8.0-linux 1 linuxhost-2.example.com
	-.--/-.--/-.-- - i386-redhat8.0-linux 1 linuxhost-3.example.com
	0.00/0.00/0.00 s i386-redhat8.0-linux 1 linuxhost-4.example.com
	0.40/0.45/0.42 s i386-debian3.0-linux 2 linuxhost-5.example.com
	0.43/0.50/0.40 s i386-debian3.0-linux 2 linuxhost-6.example.com
	0.10/0.00/0.00 s sparc-sun-solaris8 1 solarishost-1.example.com
	x.xx/x.xx/x.xx - sparc-sun-solaris8 1 solarishost-2.example.com
	0.00/0.00/0.00 s alpha-hp-osf5.0 1 osfhost-1.example.com
	0.35/0.58/0.21 s mips-sgi-irix6.5 16 irixhost-1.example.com

linuxhost-3.example.com の -.-- は，このノード上に（指定したポートで） 
gfsd が動いていないことを示し，solarishost-2.example.com の x.xx はこ
のノードに接続できない（ノードかネットワークが落ちている）ことを示して
います．このような問題を追及するには，"-v" オプションを追加してエラー
メッセージを表示させるようにしてください．

◇ 各ユーザの設定

各ユーザのシェル設定ファイル (.bashrc, .cshrc など) に以下の定義を追加
します．

Bourne Shell の場合:
	gfcd() { eval "`gfsetdir $1`"; }

csh の場合:
	alias gfcd 'eval `gfsetdir \!*`'

また，環境変数 PATH の設定に /usr/grid/bin を追加します．

この設定を行うことにより gfcd コマンドで Gfarm 作業ディレクトリの変更が
できるようになります．

	% gfcd foo

現在の作業ディレクトリは，gfpwd コマンドで確認できます．

	% gfpwd

◇ その他の設定

この後，各ユーザは，各自の作業ディレクトリを作成する必要があります．ま
た，システム管理者が，Gfarm 並列コマンドの登録を行う必要があります．こ
の２つの作業に関しては，次の実行方法の項で説明します．

=======================================================================

● 実行方法

この章では，各ユーザによる，サンプルの実行例を説明します．詳しくはユー
ザーガイド doc/GUIDE.ja をご覧下さい．

◇ サインオン

現在，認証方式として共通秘密鍵方式とグリッド・セキュリティ・インフラス
トラクチャ(GSI)をサポートしています．どちらの認証方式を利用するかは設
定ファイルで指定します．これらの認証方式は両方を同時に利用することはで
きません．

・共有秘密鍵方式

共有秘密鍵方式はホームディレクトリを共有している信頼された環境で用いる
ことを仮定しています．この方式では，秘密鍵がホームディレクトリ上に自動
的に作成され，すべてのノードで共有されます．この環境で利用する限り，特
別なサインオン操作は必要ありません．

ホームディレクトリを共有していない環境，あるいは広域環境で，この方式を
利用する場合は，以下の手順で秘密鍵として利用している認証用セッション・
キー・ファイルをあらかじめ安全にコピーしておく必要があります．

1. クライアント上で下記のコマンドを実行して，「~/.gfarm_shared_key」に
  認証用セッション・キー・ファイルを作成する．

	% gfkey -c

2. 「~/.gfarm_shared_key」を，メタデータサーバのホストとファイルシステ
  ムノードの全ホストのホームディレクトリに scp などでコピーする．

ここで作成されたセッション・キー・ファイルは作成されてから24時間有効で
す．

・グリッド・セキュリティ・インフラストラクチャ(GSI)

GSI を利用する場合は，ユーザ証明書と，利用するファイルシステムノードお
よびメタデータサーバのホスト証明書が必要になります．さらに，全てのノー
ドの /etc/grid-security/grid-mapfile に，ユーザ証明書のサブジェクト名
とUNIXユーザ名の対応を定義する必要があります．GSI の詳細は，下記の WWW 
ページを参照してください．
	http://www.globus.org/security/

GSI ではユーザ代理証明書を作成することでサインオンが完了します．

	% grid-proxy-init

◇ 各ユーザの作業ディレクトリの登録

この項は，各ユーザが，最初に一度だけ実行する必要のある項目です．

	% gfmkdir gfarm:~

◇ 実行確認

各ファイルシステムノードにアクセス可能かどうか確認してみましょう．

	% gfhost | gfrun -H - hostname

◇ Gfarm 並列コマンドの登録

この項は，システム管理者が，ファイルシステムノードを構成するアーキ
テクチャそれぞれについて，一度づつ実行する必要のある項目です．

並列ファイルコピー，並列 grep などのコマンドを Gfarm ファイルシステム
に登録するために，それぞれのアーキテクチャのファイルシステムノードで
以下を実行します．

	% /usr/grid/sbin/gfregister

この結果，並列コマンドが gfarm:/bin ディレクトリに登録されます．

	% gfls -l gfarm:/bin
	-rwxr-xr-x tatebe   *            404988 Feb  7 01:30 gfcombine
	-rwxr-xr-x tatebe   *            479056 Feb  7 01:30 gfcombine_hook
	-rwxr-xr-x tatebe   *            404133 Feb  7 01:30 gfcp
	-rwxr-xr-x tatebe   *            478109 Feb  7 01:30 gfcp_hook
	-rwxr-xr-x tatebe   *            406474 Feb  7 01:30 gfgrep
	-rwxr-xr-x tatebe   *            423342 Feb  7 01:44 gfreg
	-rwxr-xr-x tatebe   *            423255 Feb  7 01:30 gfsplck

登録されているアーキテクチャは gfwhere で確認できます．

	% gfwhere gfarm:/bin/gfcp

◇ Gfarmファイルシステムの利用例

以下に，Gfarmファイルシステムの利用例を示します．

・複数ファイルを一つの Gfarmファイルとしてインポート

  Gfarmファイルシステムでは，複数のファイルをまとめて一つのファイルと
  して扱うことができます．例えば，file01 から file10 までのファイルを，
  gfarm:file として扱うことができます．このためには，まず以下のように 
  gfreg コマンドを利用してファイルを登録します．

	% gfreg file?? gfarm:file

  このとき，file01 から file10 までのファイルはグルーピングされ，ファ
  イル gfarm:file としてアクセスできるようになります．

	% gfls -l gfarm:file

  gfls コマンドでは Gfarm URL の gfarm: は省略可能ですので，

	% gfls -l file

  でも同じ結果となります．次に，gfwhere コマンドで格納先を確認してみま
  しょう．

	% gfwhere gfarm:file
	0: gfm01.apgrid.org
	1: gfm02.apgrid.org
	2: gfm03.apgrid.org
	3: gfm04.apgrid.org
	4: gfm05.apgrid.org
	5: gfm06.apgrid.org
	6: gfm07.apgrid.org
	7: gfm08.apgrid.org
	8: gfm09.apgrid.org
	9: gfm10.apgrid.org

  gfwhere コマンドも gfls と同様に Gfarm URL の gfarm: は省略可能です．
  gfwhere コマンドの出力で : の左はファイルインデックス番号と呼ばれ，
  上記の例では 0 から 9 までが割り当てられています．: の右は，格納され
  ているファイルシステムノードが表示されます．

  格納されたファイルは，全体を一つのファイルとしてアクセスすることも，
  それぞれのファイルの集合としてアクセスすることもできます．gfexport
  を利用して，ファイルの内容を表示してみましょう．

	% gfexport gfarm:file
	% gfexport -I 0 gfarm:file

  はじめの例は，gfarm:file を file01 から file10 までが結合したファイ
  ルとして扱い，ファイルの内容を表示します．次の例は，gfarm:file のう
  ち，インデックス番号が 0 のファイルを表示します．この例では file01 
  の内容が表示されることになります．

  上記のファイル登録は，以下のようにファイルを一つづつ登録することもで
  きます．この場合，0 から 9 までのファイルのインデックス番号および，
  ファイル総数 10 を gfreg のコマンド引数で与えます．

	% gfreg -I 0 -N 10 [ -h ホスト ] file01 gfarm:file
	% gfreg -I 1 -N 10 [ -h ホスト ] file02 gfarm:file
	% ...
	% gfreg -I 9 -N 10 [ -h ホスト ] file10 gfarm:file

  このとき，それぞれのファイルはそのとき最も負荷の低いファイルシステム
  ノードに格納されますが，-h オプションでファイルシステムノードを直接
  指定することもできます．ファイルを一つづつ登録する上記コマンドをファ
  イルシステムノードで実行すると，遠隔のファイルシステムノードよりも自
  ノードが優先して選ばれてしまうため，全ファイルが自ノードに登録されて
  しまうことになります．この場合，ファイルを分散したい場合には -h オプ
  ションを指定して，ホスト名を指定する必要がありますので，注意が必要で
  す．

・テキストファイルを複数ホストに分割してインポート

  gfimport_text は引数に指定したテキスト・ファイルを，一行を複数のフラ
  グメントに分割することのないように分割して Gfarm ファイルシステムに
  取り込むサンプルプログラムです．

	% gfimport_text -H ホスト定義ファイル -o gfarm:テスト.txt テキストファイル

  上記「-H」オプションで指定する「ホスト定義ファイル」は，import した
  ファイルのファイル断片を置くファイルシステムノードのホスト名を記述し
  たファイル名です．
  一行に一ホストの形式で指定してください．指定したホストに，入力テキス
  トファイルを等分割して import します．

  ホスト定義ファイルは「-」を指定することにより標準入力を指定すること
  ができ，この場合 gfsched や gfhost コマンドと組み合わせて以下のよう
  に指定することもできます．

	% gfsched -N 8 | gfimport_text -H - -o gfarm:テスト.txt テキストファイル
		… テキストファイルを8つのフラグメントに分割して登録します．

	% gfhost | gfimport_text -H - -o gfarm:テスト.txt テキストファイル
		… テキストファイルを全ホスト数と同数のフラグメントに分割
		   して登録します．

  「-H ホスト定義ファイル」の代わりに「-f フラグメント定義ファイル」を
  指定することもできます．この場合，各行を下記の形式で記述します．
	そのフラグメントのバイト数  ホスト名

  結果を確認してみましょう．

	% gfexport gfarm:テスト.txt | diff -c - テキストファイル

・固定長レコードファイルを複数ホストに分割してインポート

	% gfimport_fixed -H ホスト定義ファイル -o gfarm:テスト.bin -l 100 固定長レコードファイル

  結果を確認してみましょう．

	% gfexport gfarm:テスト.bin | cmp - 固定長レコードファイル

・gfgrep - parallel grep

  gfgrep プログラムが，gfarm:/bin/gfgrep という名称で登録されているこ
  とを確認します．

	% gfls -l gfarm:/bin/gfgrep

  もし登録されていないない場合は，システム管理者に，前述の
  Gfarm 並列コマンドの登録の作業の実行を依頼します．

  あるいは，gfreg コマンドを用いて，自分自身で登録することもできます．

	% gfreg /usr/grid/bin/gfgrep gfarm:gfgrep

  この場合，下記の「gfarm:/bin/gfgrep」は「gfarm:gfgrep」で置き換えて
  ください．
  なお，ファイルシステムノード以外からプログラムを登録する場合は，
  アーキテクチャ名を -a オプションで指定する必要があります．

  登録されたら，実行してみましょう．

	% gfrun -G gfarm:テスト.txt gfarm:/bin/gfgrep -o gfarm:gfgrep.out \
		正規表現 gfarm:テスト.txt

  結果を確認してみましょう．

	% gfexport gfarm:gfgrep.out
	% grep 正規表現 テキストファイル

・gfwc - parallel word counts

  このコマンドは，バイナリ作成時に --with-mpi オプションが指定されて
  いた場合のみ存在します．  

  gfgrep と同様に gfwc プログラムが，gfarm:/bin/gfwc という名称で登録
  されていることを確認し，登録されていない場合は，システム管理者に
  Gfarm 並列コマンドの登録の作業の実行を依頼します．

  実行してみましょう．

	% gfmpirun_p4 gfarm:/bin/gfwc gfarm:テスト.txt

  結果を確認してみましょう．

	% wc テキストファイル

$Id$
