Requirements
============

- GNU Make
- Python (>= 3.3)
- Docker
- Docker Compose v2
- sudo

Restriction
===========
- Memory size should be larger than 4 GiB

- The host OS is assumed to be used exclusively because docker/dev requires
  root privilege

- cgroup v2 should be disabled

  In a docker container, systemctl does not work with cgroup v2.  You can
  check by the following command

  $ mount | grep "cgroup2 on /sys/fs/cgroup type"; [ $? -eq 0 ] && echo cgroup2 enabled || echo cgroup2 disabled

  To disable cgroup2, add "systemd.unified_cgroup_hierarchy=false
  systemd.legacy_systemd_cgroup_controller=false" to GRUB_CMDLINE_LINUX_DEFAULT
  in /etc/default/grub like

  GRUB_CMDLINE_LINUX_DEFAULT="quiet systemd.unified_cgroup_hierarchy=false systemd.legacy_systemd_cgroup_controller=false"

  update and reboot

  $ sudo update-grub
  $ sudo reboot

Quick start on Ubuntu 18.04 host
================================

1. Install Docker and Docker Compose
   See https://docs.docker.com/engine/install/ubuntu/ for details.

2. Install other packages

  $ sudo apt install make git

3. Checkout gfarm and gfarm2fs

  $ git clone git@github.com:oss-tsukuba/gfarm.git
  $ cd gfarm
  $ git clone git@github.com:oss-tsukuba/gfarm2fs.git

4. Execute docker containers

  $ cd docker/dev
  $ cp config-default.mk config.mk
  edit config.mk
  $ cd dist/centos7/src
  $ make help	# display usage.
  $ make reborn	# up the containers.
  $ make shell	# enter the container.
  $ make regress # execute regress.
  $ make down	# down the containers.

  Note that you need to have a privilege to execute sudo

Keep keys
=========

1. to keep ssh host keys only for client1 container

  $ cd dist/centos7/src  # when using source package on CentOS 7
  $ make shell
  ### in container
  user1$ sudo ./SAVE_SSH_HOST_KEYS.sh

  Note: These keys are used next time in all distributions.

2. to add your ssh public keys to authorized keys only for user*@client1

  $ cd docker/dev
  ### add your public keys
  ### (Example)
  $ cat ~/.ssh/id_rsa.pub >> mnt/ssh_authorized_keys

  $ cd dist/centos7/src  # when using source package on CentOS 7
  $ make reborn

  ### use "ssh" instead of "make shell"
  $ ssh user2@192.168.224.11  # IP address of client1 container

Build test on all distributions
===============================

  $ cd docker/dev
  $ ./TEST_BUILD_ALL.sh

Note
====

- Do not edit .shadow.config.mk, docker-compose.yml, and common/rc.gfservice.

Debug
=====

* to dump core file in container

  (host_os)$ echo core.%p | sudo tee /proc/sys/kernel/core_pattern


Gfarm-S3-MinIO
==============

1. preparation: clone gfarm-s3-minio-web and gfarm-s3-minio

  $ mkdir -p docker/dev/mnt/work
  $ cd docker/dev/mnt/work
  $ git clone git@github.com:oss-tsukuba/gfarm-s3-minio-web.git
  $ cd gfarm-s3-minio-web
  $ git checkout develop
  $ cd ..
  $ git clone git@github.com:oss-tsukuba/gfarm-s3-minio.git
  $ cd gfarm-s3-minio
  $ git checkout gfarm

2. to install gfarm-s3 into running client1 container

  $ cd (docker/dev dir)
  $ cd dist/centos7/src
  $ make s3setup

3. to access

  (WebUI from Web Browser)
    http://{IP address of host OS}:18080/
      (GFDOCKER_HOSTPORT_S3_HTTP = 18080)
      or
    https://{IP address of host OS}:18443/
      (GFDOCKER_HOSTPORT_S3_HTTPS = 18443)

    username: user1
    password: <gfarm-s3-sharedsecret-password command output>

  - push "Start" button.
  - copy "Access Key ID" to clipboard later.
  - copy "Secret Access Key" to clipboard later.

  (S3 client from client1)
  $ make shell
  $ aws configure
  ### set "Access Key ID" and "Secret Access Key"
  $ aws s3 --endpoint-url http://{IP address of host OS}:18080 \
    mb s3://abcde

  $ mc ...
  $ s3fs ...
  $ goofys ...

4. to run s3 unit test

  $ cd docker/dev/dist/centos7/src
  $ make s3setup
  $ make s3test

5. update gfarm-s3-minio or gfarm-s3-minio-web

  $ cd docker/dev/mnt/work/
  ### edit or update gfarm-s3-minio and gfarm-s3-minio-web
  $ cd docker/dev/dist/centos7/src
  $ make s3update


Nextcloud using Gfarm as primary storage
========================================

1. preparation: clone nextcloud-gfarm

  $ mkdir -p docker/dev/mnt/work
  $ cd docker/dev/mnt/work
  $ git clone git@github.com:oss-tsukuba/nextcloud-gfarm.git
  $ cd nextcloud-gfarm
  $ git checkout master

2. to setup nextcloud-gfarm

  edit configurations:
  docker/dev/common/nextcloud/ :
  - docker-compose.nextcloud-gfarm.override.yml
    - ports
  - nextcloud.env
    - NEXTCLOUD_TRUSTED_DOMAINS

  $ cd docker/dev/dist/centos7/src
  $ make reborn
  $ make nextcloud-reborn

3. to restart

  use files on persistent docker volumes.
  (backup files are not used.)

  $ make nextcloud-restart

4. to show logs

  $ make nextcloud-logs-less
  $ make nextcloud-logs-f
  $ make nextcloud-logs

5. to destroy nextcloud-gfarm container

  (to leave Nextcloud persistent volumes)
  $ make nextcloud-rm

  (to clear Nextcloud persistent volumes)
  $ make nextcloud-rm-data

  (to destroy all Gfarm containers and Nextcloud persistent volumes)
  $ make down-with-nextcloud

6. to access Nextcloud WebUI

  (from Web Browser)
    http://{IP address of host OS}:28080/
    user: admin
    password: (from docker/dev/common/nextcloud/nextcloud_admin_password)

7. to backup into Gfarm

  executed periodically by crontab in Nextcloud container.

  (manually)
  $ make nextcloud-shell
  $ /backup.sh

  ### backup files are saved in gfarm:/home/user1/nextcloud-backup/

8. to restore from Gfarm

  (assume persistent volumes disappears)
  ### restoring from gfarm:/home/user1/nextcloud-backup automatically.

  $ make nextcloud-reborn
  ### Gfarm containers are not recreted.

9. upgrade Nextcloud version

  edit docker-compose.nextcloud-gfarm.override.yml
  # ex. (before ...) NEXTCLOUD_VERSION: 21
  #     (after  ...) NEXTCLOUD_VERSION: 22
  ## NOTE: It is only possible to upgrade one major version at a time.
  ### confirmed history:
  ### 20 -> 21
  ### 21 -> 22

  (not clear persistent volumes)
  $ make nextcloud-recreate

  (clear persistent volumes and restore from backup files on Gfarm)
  $ make nextcloud-reborn


Gfarm GridFTP DSI
=================

1. preparation: clone gfarm-gridftp-dsi

  $ mkdir -p docker/dev/mnt/work
  $ cd docker/dev/mnt/work
  $ git clone git@github.com:oss-tsukuba/gfarm-gridftp-dsi.git
  $ cd gfarm-gridftp-dsi
  $ git checkout <<branch name>>
  ### edit gfarm-gridftp-dsi

2. to install gfarm-gridftp-dsi into running container

  $ cd docker/dev/dist/centos7/src
  $ make gridftp-setup

3. to run unit test

  $ cd docker/dev/dist/centos7/src
  $ make gridftp-test
