set -xeu

GFDOCKER_GFARMS3_UPDATE_ONLY=${GFDOCKER_GFARMS3_UPDATE_ONLY:-0}

# user1 executes this script.
SUDO="sudo -E"
SUDO_USER2="sudo sudo -u user2"

case $GFDOCKER_PRJ_NAME in
	*-src) WITH_GFARM=/usr/local;;
	*-pkg) WITH_GFARM=/usr;;
	*) exit 1;;
esac

GFARM_S3_MINIO_WEB_SRC=/mnt/work/gfarm-s3-minio-web
GFARM_S3_MINIO_SRC=/mnt/work/gfarm-s3-minio

if [ ! -d $GFARM_S3_MINIO_WEB_SRC ]; then
	exit 1
fi

### choose parameters
GFARM_S3_PREFIX=/usr/local
SHARED_DIR=$GFDOCKER_GFARMS3_SHARED_DIR
CACHE_BASEDIR=$GFDOCKER_GFARMS3_CACHE_BASEDIR
CACHE_SIZE=$GFDOCKER_GFARMS3_CACHE_SIZE
WSGI_HOMEDIR=$GFDOCKER_GFARMS3_WSGI_HOMEDIR
WSGI_USER=$GFDOCKER_GFARMS3_WSGI_USER
WSGI_GROUP=$GFDOCKER_GFARMS3_WSGI_GROUP
WSGI_PORT=$GFDOCKER_GFARMS3_WSGI_PORT
MYPROXY_SERVER=$GFDOCKER_GFARMS3_MYPROXY_SERVER
USERS=$GFDOCKER_GFARMS3_USERS

## create working directory
export WORK=$HOME/tmp/work
mkdir -p $WORK

# MINIO_BUILDDIR is used by "make install-go"
export MINIO_BUILDDIR=/mnt/user1/tmp/work
${SUDO} mkdir -p ${MINIO_BUILDDIR}/minio/work/build
${SUDO} chown -R user1 ${MINIO_BUILDDIR}

## obtain or update source code
${SUDO} rsync -rlptD $GFARM_S3_MINIO_WEB_SRC/ $WORK/gfarm-s3-minio-web/
if [ -e $GFARM_S3_MINIO_SRC ]; then
	${SUDO} rsync -rlptD $GFARM_S3_MINIO_SRC/ $MINIO_BUILDDIR/minio/work/build/gfarm-s3-minio/
fi
${SUDO} chown -R user1 $WORK/gfarm-s3-minio-web/

## update only
if [ $GFDOCKER_GFARMS3_UPDATE_ONLY -eq 1 ]; then
	cd $WORK/gfarm-s3-minio-web/web
	make
	${SUDO} make install
	exit 0
fi

# XXX TODO define in Dockerfile
### install prerequisites
${SUDO} yum update -y
${SUDO} yum install -y \
	httpd \
	mod_ssl \
	uuid \
	myproxy \
	python3-devel \
	python3-pip \
	nodejs \

### nginx is not supported yet
#${SUDO} yum install -y nginx

${SUDO} python3 -m pip install 'Django<2.2'
${SUDO} python3 -m pip install gunicorn

## for test.py
${SUDO} python3 -m pip install boto3

### site settings

## deploy apache http server
HTTPD_CONF=/etc/httpd/conf.d/myserver.conf
HTTPD_COMMON_CONF=/etc/httpd/conf.d/myserver-common.conf
HTTPD_DocumentRoot=/usr/local/share/www
INDEX_HTML="${HTTPD_DocumentRoot}/index.html"
SERVER_CRT=/etc/pki/tls/certs/localhost.crt
SERVER_KEY=/etc/pki/tls/private/localhost.key

cat <<EOF | sed -e "s;@SERVER_CRT@;$SERVER_CRT;" \
                -e "s;@SERVER_KEY@;$SERVER_KEY;" \
                -e "s;@HTTPD_COMMON_CONF@;$HTTPD_COMMON_CONF;" \
		| ${SUDO} dd of=$HTTPD_CONF
ServerName ${GFDOCKER_SUBNET%.0/24}.$GFDOCKER_START_HOST_ADDR
<VirtualHost *:80>
	Include @HTTPD_COMMON_CONF@
</VirtualHost>

<VirtualHost *:443>
	SSLEngine on
	SSLCertificateFile @SERVER_CRT@
	SSLCertificateKeyFile @SERVER_KEY@
	Include @HTTPD_COMMON_CONF@
</VirtualHost>
EOF

cat <<EOF | ${SUDO} dd of=$HTTPD_COMMON_CONF
DocumentRoot $HTTPD_DocumentRoot
ServerAdmin root@localhost
CustomLog logs/access_log common
ErrorLog logs/error_log

<Directory "$HTTPD_DocumentRoot">
	AllowOverride FileInfo AuthConfig Limit Indexes
	Options MultiViews Indexes SymLinksIfOwnerMatch Includes
	AllowOverride All
	Require all granted
</Directory>
EOF

if [ ! -f "$INDEX_HTML" ]; then
	${SUDO} mkdir -p "$HTTPD_DocumentRoot"
#	echo "gfarm -- $(date)" | ${SUDO} dd of="$INDEX_HTML"
	echo '<a href="/gfarm/console">Gfarm-S3</a>' |
		${SUDO} dd of="$INDEX_HTML" oflag=append
fi

## for debug (do not apply following settings on service host)
${SUDO} chmod og+rX /var/log/httpd

${SUDO} systemctl enable httpd

### nginx is not supported yet
#vi /etc/nginx/nginx.conf
#systemctl enable nginx.service
## debug
#chmod o+rx /var/log/nginx

## create user for wsgi
${SUDO} groupadd $WSGI_GROUP || true
id $WSGI_USER || ${SUDO} useradd $WSGI_USER -g $WSGI_GROUP -d $WSGI_HOMEDIR

#### install gfarm-s3

(cd $WORK/gfarm-s3-minio-web && ./configure \
	--prefix=$GFARM_S3_PREFIX \
	--with-gfarm=$WITH_GFARM \
	--with-globus=/usr \
	--with-myproxy=/usr \
	--with-apache=/usr \
	--with-gunicorn=/usr/local \
	--with-wsgi-homedir=$WSGI_HOMEDIR \
	--with-wsgi-user=$WSGI_USER \
	--with-wsgi-group=$WSGI_GROUP \
	--with-wsgi-port=$WSGI_PORT \
	--with-cache-basedir=$CACHE_BASEDIR \
	--with-cache-size=$CACHE_SIZE \
	--with-myproxy-server=$MYPROXY_SERVER \
	--with-gfarm-shared-dir=$SHARED_DIR \
	--with-minio-builddir=$MINIO_BUILDDIR)

#(cd $WORK/gfarm-s3-minio-web/minio && make install-go)
## include install-go
(cd $WORK/gfarm-s3-minio-web && make)
(cd $WORK/gfarm-s3-minio-web && ${SUDO} make install)

#### gfarm-s3-settings

## create cache directory
${SUDO} mkdir -p $CACHE_BASEDIR
${SUDO} chmod 1777 $CACHE_BASEDIR

## create shared directory
gfmkdir -p ${SHARED_DIR#/} || true
gfchmod 1777 ${SHARED_DIR#/} || true

. ${GFARM_S3_PREFIX}/etc/gfarm-s3.conf

## register users
for u in $USERS; do
	# match whole line
	if grep -q -x ${u} ${GFARMS3_LOCAL_USER_MAP}; then
		echo "already exists: ${u}"
		continue
	fi
	global_user=${u%%:*}
	local_user=${u%:*}
	local_user=${local_user#*:}
	access_key_id=${u##*:}
	${SUDO} $GFARM_S3_PREFIX/bin/gfarm-s3-useradd $global_user $local_user $access_key_id
	${SUDO} usermod -a -G gfarms3 $local_user
	shared_dir_user=${SHARED_DIR#/}/$local_user
	gfmkdir -p $shared_dir_user
	gfsudo gfchown $global_user $shared_dir_user
	gfsudo gfchmod 755 $shared_dir_user
done

## edit HTTPD's configfile (i.e. myserver-common.conf)
tmpfile=$(mktemp /tmp/XXXXXX) || exit 1
(cat $HTTPD_COMMON_CONF
 cat $WORK/gfarm-s3-minio-web/etc/apache-gfarm-s3.conf
 ) >$tmpfile
${SUDO} cp $WORK/gfarm-s3-minio-web/etc/e403.html $HTTPD_DocumentRoot/e403.html
${SUDO} apachectl stop
${SUDO} chown --reference $HTTPD_COMMON_CONF $tmpfile
${SUDO} chgrp --reference $HTTPD_COMMON_CONF $tmpfile
${SUDO} chmod --reference $HTTPD_COMMON_CONF $tmpfile
${SUDO} mv $tmpfile $HTTPD_COMMON_CONF
${SUDO} apachectl start

## start gunicorn service
${SUDO} systemctl enable --now gunicorn.service

# XXX TODO define in Dockerfile
## install AWS CLI v1
#sudo yum install -y awscli

# install AWS CLI v2
AWSCLI_URL="https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
AWSCLI_ZIP=${WORK}/awscliv2.zip

if [ ! -f ${AWSCLI_ZIP} ]; then
    curl ${AWSCLI_URL} -o ${AWSCLI_ZIP}
    cd ${WORK}
    # overwrite existing files
    unzip -o ${AWSCLI_ZIP}
    ${SUDO} ./aws/install --update
fi
/usr/local/bin/aws --version

# XXX TODO define in Dockerfile
## install s3cmd
sudo yum install -y s3cmd

## install goofys
### use source package
# GOPATH=${HOME}/work
# export GOPATH
# GO=${MINIO_BUILDDIR}/minio/work/go/bin/go
# GOOFYS_URL=github.com/kahing/goofys
# ${GO} get ${GOOFYS_URL}
# ${GO} install ${GOOFYS_URL}

### use binary
GOOFYS_BIN_URL=https://github.com/kahing/goofys/releases/latest/download/goofys
GOOFYS_BIN=/usr/local/bin/goofys
if [ ! -f ${GOOFYS_BIN} ]; then
	${SUDO} yum install -y wget
	${SUDO} wget -O ${GOOFYS_BIN} ${GOOFYS_BIN_URL}
	${SUDO} chmod +x ${GOOFYS_BIN}
fi

## install s3fs
S3FS_URL=https://github.com/s3fs-fuse/s3fs-fuse.git

# XXX TODO define in Dockerfile
sudo yum install -y automake gcc-c++ fuse-devel openssl-devel libcurl-devel libxml2-devel

[ -d $WORK/s3fs-fuse ] || (cd $WORK && git clone ${S3FS_URL})
(cd $WORK/s3fs-fuse && \
./autogen.sh && \
./configure --prefix=/usr && \
make -j && \
${SUDO} make install)

## cleanup
#(cd $WORK/gfarm-s3-minio-web && ${SUDO} make clean)
#(cd $WORK/gfarm-s3-minio-web && ${SUDO} make distclean)

update_secret() {
	user="${1}"
	secret="${2}"
	gfarm_s3_dir="/home/${user}/.gfarm-s3"
	if [ -n "${secret}" ]; then
		${SUDO} mkdir -p "${gfarm_s3_dir}"
		echo "${secret}" | ${SUDO} dd of="${gfarm_s3_dir}/secret_key"
		${SUDO} chown -R "${user}" "${gfarm_s3_dir}"
	fi
}

update_secret user1 "${GFDOCKER_GFARMS3_SECRET_USER1}"
update_secret user2 "${GFDOCKER_GFARMS3_SECRET_USER2}"


## show sharedsecret password
echo "WebUI password for user1:"
$GFARM_S3_PREFIX/bin/gfarm-s3-sharedsecret-password

echo "WebUI password for uesr2:"
$SUDO_USER2 $GFARM_S3_PREFIX/bin/gfarm-s3-sharedsecret-password
